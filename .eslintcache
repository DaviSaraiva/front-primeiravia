[{"C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\index.tsx":"1","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\reportWebVitals.js":"2","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\pages\\login\\Login.tsx":"3","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\pages\\register\\Form.tsx":"4","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\pages\\pagamento\\Pagamento.tsx":"5","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\pages\\recuperar_senha\\RecSenha.tsx":"6","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\pages\\recuperar_senha\\SegRecuperacao.tsx":"7","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\pages\\loading\\Loading.tsx":"8","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\globals\\globalFunctions.ts":"9","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\services\\AccessServices.ts":"10","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\services\\SolicitacoesService.ts":"11","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\services\\PagamentosServices.ts":"12","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\visual_components\\header\\Header.tsx":"13","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\visual_components\\header\\HeaderSimple.tsx":"14","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\visual_components\\modals\\ModalContent.tsx":"15","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\visual_components\\footer\\FooterSimple.tsx":"16","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\services\\Api.tsx":"17","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\visual_components\\modals\\ModalVerifyInfoEstudante.tsx":"18","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\bloqueio\\pages\\main\\Main.tsx":"19","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\bloqueio\\pages\\nova_solicitacao\\NovaSolicitacao.tsx":"20","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\atualizacao\\pages\\cadastro\\CadastroPessoa.tsx":"21","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\primeiraVia\\pages\\cadastro\\CadastroPessoa.tsx":"22","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\atualizacao\\pages\\home\\Home.tsx":"23","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\atualizacao\\pages\\forms_cadastro\\InfoEstudante.tsx":"24","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\atualizacao\\pages\\forms_cadastro\\FotoEstudante.tsx":"25","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\primeiraVia\\pages\\forms_cadastro\\CarteiraEstudante.tsx":"26","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\primeiraVia\\pages\\forms_cadastro\\ComprovanteEndereco.tsx":"27","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\primeiraVia\\pages\\forms_cadastro\\ComprovanteMatricula.tsx":"28","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\primeiraVia\\pages\\forms_cadastro\\DocumentoIdentificacao.tsx":"29","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\primeiraVia\\pages\\forms_cadastro\\FotoEstudante.tsx":"30","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\primeiraVia\\pages\\forms_cadastro\\InfoEstudante.tsx":"31","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\atualizacao\\pages\\forms_cadastro\\ComprovanteEndereco.tsx":"32","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\atualizacao\\pages\\forms_cadastro\\CarteiraEstudante.tsx":"33","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\atualizacao\\pages\\forms_cadastro\\ComprovanteMatricula.tsx":"34","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\atualizacao\\pages\\forms_cadastro\\DocumentoIdentificacao.tsx":"35","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\pages\\menu\\Menu.tsx":"36","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\pages\\loading\\LoadingPrimeira.tsx":"37"},{"size":2452,"mtime":1614865686043,"results":"38","hashOfConfig":"39"},{"size":362,"mtime":1614265721000,"results":"40","hashOfConfig":"39"},{"size":6698,"mtime":1614796780973,"results":"41","hashOfConfig":"39"},{"size":15840,"mtime":1614603546308,"results":"42","hashOfConfig":"39"},{"size":45266,"mtime":1614865234606,"results":"43","hashOfConfig":"39"},{"size":2965,"mtime":1614265721000,"results":"44","hashOfConfig":"39"},{"size":6953,"mtime":1614265721000,"results":"45","hashOfConfig":"39"},{"size":4507,"mtime":1614861091375,"results":"46","hashOfConfig":"39"},{"size":6657,"mtime":1614265721000,"results":"47","hashOfConfig":"39"},{"size":9671,"mtime":1614265721000,"results":"48","hashOfConfig":"39"},{"size":2805,"mtime":1614607339790,"results":"49","hashOfConfig":"39"},{"size":3326,"mtime":1614630219728,"results":"50","hashOfConfig":"39"},{"size":4447,"mtime":1614265721000,"results":"51","hashOfConfig":"39"},{"size":1205,"mtime":1614265721000,"results":"52","hashOfConfig":"39"},{"size":5118,"mtime":1614265721000,"results":"53","hashOfConfig":"39"},{"size":583,"mtime":1614265721000,"results":"54","hashOfConfig":"39"},{"size":239,"mtime":1614265721000,"results":"55","hashOfConfig":"39"},{"size":6825,"mtime":1614265721000,"results":"56","hashOfConfig":"39"},{"size":14689,"mtime":1614863356015,"results":"57","hashOfConfig":"39"},{"size":8251,"mtime":1614625128067,"results":"58","hashOfConfig":"39"},{"size":10213,"mtime":1614624359274,"results":"59","hashOfConfig":"39"},{"size":10309,"mtime":1614866350195,"results":"60","hashOfConfig":"39"},{"size":13215,"mtime":1614625471936,"results":"61","hashOfConfig":"39"},{"size":12759,"mtime":1614624914825,"results":"62","hashOfConfig":"39"},{"size":9111,"mtime":1614625396609,"results":"63","hashOfConfig":"39"},{"size":13257,"mtime":1614865799641,"results":"64","hashOfConfig":"39"},{"size":13503,"mtime":1614623854140,"results":"65","hashOfConfig":"39"},{"size":12250,"mtime":1614623854153,"results":"66","hashOfConfig":"39"},{"size":24343,"mtime":1614624960678,"results":"67","hashOfConfig":"39"},{"size":9111,"mtime":1614625419909,"results":"68","hashOfConfig":"39"},{"size":12759,"mtime":1614624970060,"results":"69","hashOfConfig":"39"},{"size":13503,"mtime":1614623461689,"results":"70","hashOfConfig":"39"},{"size":13240,"mtime":1614625217715,"results":"71","hashOfConfig":"39"},{"size":12250,"mtime":1614623568749,"results":"72","hashOfConfig":"39"},{"size":24343,"mtime":1614624877871,"results":"73","hashOfConfig":"39"},{"size":1039,"mtime":1614798561599,"results":"74","hashOfConfig":"39"},{"size":4686,"mtime":1614862597364,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"nflyxt",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"78"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"78"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"78"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"78"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"78"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"78"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"78"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"78"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"78"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"78"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"78"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"78"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"78"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"78"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"78"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"78"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"78"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"78"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"78"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"78"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"78"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\index.tsx",[],["168","169"],"C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\reportWebVitals.js",[],["170","171"],"C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\pages\\login\\Login.tsx",[],"C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\pages\\register\\Form.tsx",["172"],"import React, { useState } from 'react';\nimport 'antd/dist/antd.css';\nimport {\n  Form,\n  Input,\n  Checkbox,\n  Button,\n  Select,\n  Row,\n  Col,\n  message,\n  Alert,\n} from 'antd';\nimport './Form.css';\nimport '../../globals/globalStyle.css'\nimport InputMask from 'antd-mask-input';\nimport { cpf } from 'cpf-cnpj-validator';\nimport Modal from 'antd/lib/modal/Modal';\nimport { useHistory } from 'react-router-dom';\nimport HeaderSimple from '../../visual_components/header/HeaderSimple';\nimport FooterSimple from '../../visual_components/footer/FooterSimple';\nimport { isLogged, validatePhone } from '../../globals/globalFunctions';\nimport { saveUser } from '../../services/AccessServices';\n\nconst RegistrationForm = () => {\n  let history = useHistory()\n  const { Option } = Select;\n\n  if (isLogged()) {\n    history.replace('/')\n  }\n\n  let estudanteLocal = localStorage.getItem(\"usuario\")\n\n  if (estudanteLocal !== null && estudanteLocal !== undefined) {\n    history.replace('/pagamento')\n  }\n\n  const [loading, setLoading] = useState(false);\n  const [cpfvalid, setCpfvalid] = useState(0);\n  const [pass, setPass] = useState('');\n  const [visible, setVisible] = useState(false);\n\n  const content = (\n    <div>\n      <Alert message={\"POR QUE ATUALIZAR O CARTÃO?\"} type={\"info\"} banner />\n      <p style={{ margin: \"6px\" }}>\n        Conforme Lei Municipal n° 3.148/02, todos os usuários que gozam de benefícios tarifário serão cadastrados em um Banco de Dados na central, onde serão registrados todas as informações necessárias para o gerenciamento da destruição dos direitos nos cartões, sendo este cadastro atualizado a cada 06 (seis) meses.\n      </p>\n      <br />\n      <Alert message={\"COMO PROCEDER?\"} type={\"info\"} banner />\n      <p style={{ margin: \"6px\" }}>\n        Após aceite dos termos de atualização cadastral, através do link (<a href=\"https://atualizacaocadastral.transmobibeneficios.com.br/\">clique aqui</a>) , faça seu cadastro e anexe todos os documentos solicitados que comprovem seu direito ao benefício.\n      </p>\n      <br />\n      <Alert message={\"DOCUMENTOS NECESSÁRIOS\"} type={\"info\"} banner />\n      <ul style={{ margin: \"6px\" }}>\n        <li>Carteira Estudantil do ano vigente;</li>\n        <li>RG e CPF;</li>\n        <li>Comprovante de matricula atualizado;</li>\n        <li>Comprovante de endereço atualizado.</li>\n      </ul>\n\n      <h3 style={{ margin: \"16px\" }}>TERMOS DE ATUALIZAÇÃO CADASTRAL</h3>\n      <ul>\n        <li>Seu cartão de meia passagem não será substituído;</li>\n        <li>É importante informar os dados de telefone e email para receber a confirmação da atualização e qualquer informação sobre o seu benefício;</li>\n        <li>Para garantir a sua atualização você deverá enviar todos os documentos que comprovem o benefício no formato JPEG ou PNG;</li>\n        <li>A atualização cadastral, via site, terá o custo de R$ 7.85 (sete reais e oitenta e cinco centavos)</li>\n        <li>No prazo de até 5 (cinco) dias uteis, a contar do cadastramento e envio de todos os documentos, você receberá a confirmação da atualização cadastral.</li>\n      </ul>\n\n      <br />\n      <h3 style={{ margin: \"16px\" }}>FINALIDADE DE USOS DE DADOS</h3>\n      <p style={{ margin: \"16px\" }}>\n        A Transmobi prioriza a transparência e segurança das informações, por isso, entendemos que temos o dever de informar qual a finalidade da coleta dos seus dados. Os nossos sistemas são seguros, na qual as coletas e armazenamentos de dados têm como objetivo identificar o usuário, prevenir fraudes, informar sobre novidades e entregar o serviço proposto com agilidade e qualidade, e melhorar a interação e experiência do usuário com os nossos produtos e serviços, modificando interfaces e fornecendo o conteúdo e os anúncios desejados relacionados a marketing.\n        Todo e qualquer compartilhamento com sistemas e fornecedores de tecnologia, mesmo os sediados em outro país, é pautado na finalidade de entregar o serviço com alta precisão. É importante ressaltar que dispomos de uma equipe focada e dedicada na proteção de seus dados.\n      </p>\n    </div>\n  );\n  const Cpf = (values: any) => {\n    if (cpf.isValid(values.target.value) === false) {\n      setCpfvalid(0);\n      message.error('CPF inválido');\n    } else {\n      setCpfvalid(1);\n      message.success('CPF válido')\n    }\n\n  }\n  const onFinish = (values: any) => {\n    let phoneIsValid = validatePhone(values.telefone, 'phone')\n    let whatsappIsValid = true\n    if (values.whatsapp!==undefined && values.whatsapp.length > 0) {\n      whatsappIsValid = validatePhone(values.whatsapp, 'whatsapp')\n    }\n\n    if (phoneIsValid && whatsappIsValid) {\n      if (cpfvalid === 1) {\n        setLoading(true)\n        saveUser(values)\n          .then((res) => {\n            if (res.data.resposta === 'confirme') {\n              message.success(\"Dados salvos com sucesso\")\n              history.goBack()\n            } else if (res.data.resposta === 'existe') {\n              message.error('Email ou Cpf já cadastrados ')\n            } else {\n              message.error('Erro ao salvar dados')\n            }\n            setLoading(false)\n          }).catch((erro) => {\n            message.error('Falha ao se conectar ao banco de dados')\n            setLoading(false)\n          });\n      }\n      else {\n        message.error('cpf incorreto')\n      }\n    } else {\n      if (!phoneIsValid) {\n        message.error('Verifique seu telefone!')\n      }\n      if (!whatsappIsValid) {\n        message.error('Verifique seu whatsapp!')\n      }\n    }\n  }\n\n  const onFinishFailed = () => {\n    message.error('Não foi possivel salvar os dados,por favor preencha todos os campos')\n  }\n\n  return (\n    <div className={\"fullDiv\"}>\n      <Modal\n        visible={visible}\n        onOk={() => {\n          setVisible(false)\n        }}\n        okText={\"Entendi\"}\n        onCancel={() => {\n          setVisible(false)\n        }}\n        cancelButtonProps={{ disabled: true, ghost: true }}\n        title={\"Termo de uso\"}\n        width={1000}\n\n      >\n        {content}\n      </Modal>\n      <Row>\n        <Col id={\"formulario\"} xs={24} sm={24} md={24} lg={12} xl={12}>\n          <HeaderSimple />\n          <div id={\"mainContainer\"}>\n            <Row>\n              <Col xs={2} sm={2} md={2} lg={5} xl={5} />\n              <Col className={\"noPadding centerVertical\"} xs={20} sm={20} md={20} lg={14} xl={14}>\n                <br />\n                <p className={\"accessFormTitle\"}>Atualização Cadastral Online {new Date().getFullYear()}</p>\n                <p className={\"accessFormSubTitle\"}>Insira abaixo os dados do estudante para solicitar a Atualização Cadastral.</p>\n                <br />\n                <Form\n                  name=\"cadestudantes\"\n                  onFinish={onFinish}\n                  onFinishFailed={onFinishFailed}>\n\n                  <p className={\"labelInputField\"}>Nome Completo:</p>\n                  <Form.Item\n                    name=\"nome\"\n                    labelCol={{ span: 24 }}\n                    rules={[\n                      {\n                        required: true,\n                        message: 'Insira um nome',\n                      },\n                    ]}\n                  >\n                    <Input\n                      className={\"inputText\"}\n                      placeholder={\"Insira o seu nome completo\"} />\n                  </Form.Item>\n\n                  <p className={\"labelInputField\"}>Email:</p>\n                  <Form.Item\n                    name=\"email\"\n                    labelCol={{ span: 24 }}\n                    rules={[\n                      {\n                        type: 'email',\n                        message: 'Insira um email valido',\n                      },\n                      {\n                        required: true,\n                        message: 'Insira seu email',\n                      },\n                    ]}\n                  >\n                    <Input\n                      className={\"inputText\"}\n                      placeholder={\"Insira o seu email\"} />\n                  </Form.Item>\n\n                  <p className={\"labelInputField\"}>Confirme o seu email:</p>\n                  <Form.Item\n                    name=\"emailConf\"\n                    labelCol={{ span: 24 }}\n                    dependencies={['email']}\n                    hasFeedback\n                    rules={[\n                      {\n                        required: true,\n                        message: 'Por favor confime seu Email!',\n                      },\n                      ({ getFieldValue }) => ({\n                        validator(rule, value) {\n                          if (!value || getFieldValue('email') === value) {\n                            return Promise.resolve();\n                          }\n                          return Promise.reject('Seus emails estao diferentes!');\n                        },\n                      }),\n                    ]}\n                  >\n                    <Input\n                      className={\"inputText\"}\n                      placeholder={\"Confirme o seu email\"} />\n                  </Form.Item>\n\n                  <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\", paddingRight: \"6px\" }}>\n                    <p className={\"labelInputField\"}>Senha: (min. 6 caracteres)</p>\n                    <p className={\"labelInputField\"} style={{ color: pass.length < 6 ? \"red\" : \"green\" }}>{pass.length}/6</p>\n                  </div>\n                  <Form.Item\n                    name=\"password\"\n                    labelCol={{ span: 24 }}\n                    rules={[\n                      {\n                        required: true,\n                        message: 'Por favor insira sua senha',\n                      },\n                      {\n                        min: 6,\n                        message: \"Pelo menos 6 caracteres.\"\n                      }\n                    ]}\n                    hasFeedback\n                  >\n                    <Input.Password\n                      className={\"inputText\"}\n                      onChange={(e: any) => setPass(e.target.value)}\n                      placeholder={\"Insira a sua senha\"} />\n                  </Form.Item>\n\n                  <p className={\"labelInputField\"}>Confirme a sua senha:</p>\n                  <Form.Item\n                    name=\"confirm\"\n                    labelCol={{ span: 24 }}\n                    dependencies={['password']}\n                    hasFeedback\n                    rules={[\n                      {\n                        required: true,\n                        message: 'Por favor confime sua senha',\n                      },\n                      ({ getFieldValue }) => ({\n                        validator(rule, value) {\n                          if (!value || getFieldValue('password') === value) {\n                            return Promise.resolve();\n                          }\n                          return Promise.reject(\n                            'Suas senhas estão diferentes, confiara novamente!',\n                          );\n                        },\n                      })\n                    ]}\n                  >\n                    <Input.Password\n                      className={\"inputText\"}\n                      placeholder={\"Confirme a sua senha\"} />\n                  </Form.Item>\n\n                  <p className={\"labelInputField\"}>CPF:</p>\n                  <Form.Item\n                    name=\"cpf\"\n                    labelCol={{ span: 24 }}\n                    rules={[\n                      {\n                        required: true,\n                        message: 'Insira o seu CPF',\n                      },\n                    ]}\n                  >\n                    <InputMask\n                      mask=\"111.111.111-11\"\n                      onBlur={Cpf}\n                      className={\"inputText\"}\n                    />\n                  </Form.Item>\n\n                  <p className={\"labelInputField\"}>Telefone:</p>\n                  <Form.Item\n                    name=\"telefone\"\n                    labelCol={{ span: 24 }}\n                    rules={[\n                      {\n                        required: true,\n                        message: 'Insira seu telefone',\n                      },\n                    ]}\n                  >\n                    <InputMask\n                      mask=\"(11) 1 1111-1111\"\n                      className={\"inputText\"}\n                    />\n                  </Form.Item>\n\n                  <p className={\"labelInputField\"}>Whatsapp:</p>\n                  <Form.Item\n                    name=\"whatsapp\"\n                    labelCol={{ span: 24 }}\n                  >\n                    <InputMask\n                      mask=\"(11) 1 1111-1111\"\n                      className={\"inputText\"}\n                    />\n                  </Form.Item>\n\n                  <p className={\"labelInputField\"}>Escolaridade:</p>\n                  <Form.Item\n                    name=\"escolaridade\"\n                    initialValue={\"ensinofundamental\"}\n                    className={\"inputText\"}\n                    labelCol={{ span: 24 }}\n                    rules={[\n                      {\n                        required: true,\n                        message: 'Escolha sua escolaridade',\n                      },\n                    ]}\n                  >\n                    <Select\n                      className={\"formItemSelector\"}\n                      bordered={false}\n                    >\n                      <Option value=\"ensinofundamental\">Ensino Fundamental</Option>\n                      <Option value=\"ensinomedio\">Ensino Médio</Option>\n                      <Option value=\"graduacao\">Graduação</Option>\n                      <Option value=\"posgraduacao\">Pós-Graduação</Option>\n                    </Select>\n                  </Form.Item>\n\n                  <p className={\"labelInputField\"} />\n                  <Form.Item\n                    name=\"termo1\"\n                    valuePropName=\"checked\"\n                    labelCol={{ span: 24 }}\n                    rules={[\n                      {\n                        validator: (_, values) => values\n                          ? Promise.resolve()\n                          : Promise.reject('Por favor aceite os termos de uso do sistema!'),\n                      },\n                    ]}\n                  >\n                    <div className={\"rowDiv\"}>\n                      <Checkbox />\n                      <div className={\"divBtnCadastrese padding16\"}>\n                        <p>\n                          Eu li e aceito os termos de\n                          <a className={\"labelInputField\"} onClick={() => { setVisible(true) }}> política de privacidade.</a>\n                        </p>\n                      </div>\n                    </div>\n                  </Form.Item>\n            \n                  <Form.Item labelCol={{ span: 24 }}>\n                    <Button className={\"greenButton buttonSolicitar\"}\n                      loading={loading}\n                      type=\"primary\"\n                      htmlType=\"submit\">\n                        Registrar\n                    </Button>\n                    <p className={\"accessFormSubTitle\"}><b>* Enviaremos um e-mail confirmando o seu cadastro.</b></p>\n                  </Form.Item>\n                </Form>\n                <br />\n              </Col>\n              <Col xs={2} sm={2} md={2} lg={5} xl={5} />\n            </Row>\n          </div>\n          <FooterSimple />\n        </Col>\n        <Col xs={0} sm={0} md={0} lg={12} xl={12}>\n          <div id={\"backgroundImage\"} className={\"divWithBackgroundImage\"} />\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default RegistrationForm;\n\n\n\n","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\pages\\pagamento\\Pagamento.tsx",["173","174","175","176"],"// /* eslint-disable prettier/prettier */\n// /* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect, useState } from 'react';\n// eslint-disable-next-line object-curly-newline\nimport { Alert, Col, Row, Tabs, Steps, Form, Input, message, Button, Modal } from 'antd';\nimport 'antd/dist/antd.css';\nimport InputMask from 'antd-mask-input';\nimport './Pagamento.css';\nimport './Pagamento.scss';\nimport { cpf } from 'cpf-cnpj-validator';\nimport { CreditCardOutlined, BarcodeOutlined, AppstoreOutlined, QrcodeOutlined, DownloadOutlined, UserOutlined, PictureOutlined, SolutionOutlined, FileDoneOutlined, HomeOutlined, IdcardOutlined, MessageFilled } from '@ant-design/icons';\nimport Cards from 'react-credit-cards';\nimport '../../globals/globalStyle.css'\nimport 'react-credit-cards/es/styles-compiled.css';\nimport Header from '../../visual_components/header/Header';\nimport { useHistory } from 'react-router-dom';\nimport { getTransacao, postTransacao, verificarPagamento, getTransacaoPrimeira, postTransacaoPrimeira, verificarPagamentoPrimeira } from '../../services/PagamentosServices';\nimport MaskedInput from 'antd-mask-input/build/main/lib/MaskedInput';\nimport { buscarCep, isLogged, logout, validateMaskValue } from '../../globals/globalFunctions';\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\nimport logoIugul from '../../images/logo_iugul.png'\n\nconst config = {\n  title: 'O boleto pode levar até 3 dias úteis para a confirmação do pagamento.',\n  content: (<p></p>)\n};\n\n\n// eslint-disable-next-line\nexport default function Pagamento() {\n  let history = useHistory()\n\n  if (!isLogged()) {\n    history.replace('/')\n  }\n\n  let originVar: string = \"atualizacao\"\n\n  if (history.location.state !== undefined) {\n    let a: any = history.location.state\n    originVar = a.origin\n  }\n\n  let estudanteModel = { id: \"\", nome: \"\", email: \"\", telefone: \"\", cpf: \"\" }\n  let estudanteLocal = localStorage.getItem(\"usuario\")\n\n  if (estudanteLocal !== null && estudanteLocal !== undefined) {\n    estudanteModel = JSON.parse(estudanteLocal)\n  } else {\n    localStorage.setItem(\"functionLooked\", \"atualizacao\")\n    history.replace('/')\n  }\n\n  const [modal, contextHolder] = Modal.useModal();\n  const { Step } = Steps;\n  const [form1] = Form.useForm();\n  const [form2] = Form.useForm();\n\n  const { TabPane } = Tabs;\n\n  const [origin] = useState(originVar)\n  const [iugulPdfUrl, setIugulPdfUrl] = useState('')\n  const [visible, setVisible] = useState(false)\n  const [loading, setLoading] = useState(false);\n  const [loading1, setLoading1] = useState(false);\n  const [cepExist, setCepExist] = useState(false);\n  const [hasGeneratedQrCode, setQRCodeGenerated] = useState(false);\n  const [imgQrCodePixUrl, setImgQrCodePixUrl] = useState('');\n  const [qrCodePixUrl, setQrCodePixUrl] = useState('');\n  const [tabKey, setTabKey] = useState('1');\n  const [numero, setNumero] = useState('');\n  const [cvc, setCvc] = useState('');\n  const [datev, setDatev] = useState('');\n  const [nomec, setNomec] = useState('');\n  const [estudante,] = useState(estudanteModel);\n  const [focused, setFocused] = useState();\n  const [idPix, setIdPix] = useState(\"\");\n  const valueDefault = origin === 'primeiravia' ? 9.99 : 7.85\n\n  useEffect(() => {\n    const timer1 = setInterval(() => {\n      if (tabKey === \"3\" && idPix !== \"\" && origin === \"atualizacao\") {\n        verificarPagamento(idPix).then((res: any) => {\n          if (res === undefined) {\n            logout()\n            history.replace(\"/\")\n          } else {\n            if (res.data.status === \"paid\") {\n              localStorage.setItem(\"idPix\", idPix)\n              message.success('Pagamento efetuado com sucesso!')\n              history.replace('/atualizacao-cadastral')\n            }\n          }\n        })\n      }\n      else if (tabKey === \"3\" && idPix !== \"\" && origin === \"primeiravia\") {\n        verificarPagamentoPrimeira(idPix).then((res: any) => {\n          if (res === undefined) {\n            logout()\n            history.replace(\"/\")\n          } else {\n            if (res.data.status === \"paid\") {\n              localStorage.setItem(\"idPix\", idPix)\n              message.success('Pagamento efetuado com sucesso!')\n              history.replace('/primeiravia-cadastro')\n            }\n          }\n        })\n      }\n    }, 5000);\n\n    return () => {\n      clearTimeout(timer1)\n    }\n  });\n\n\n  const valuePlus = () => {\n    if (tabKey === '1') {\n      return 0\n    } else if (tabKey === '2') {\n      return 0\n    } else {\n      return 0\n    }\n  }\n\n  function changeFocus(e: any) {\n    setFocused(e.target.name);\n  }\n\n  function updateTab(currentParam: any) {\n    if (currentParam !== \"2\") {\n      setVisible(false)\n    }\n\n    setTabKey(currentParam)\n  }\n\n  useEffect(() => {\n    if (origin === \"atualizacao\") {\n      getTransacao(estudante.id).then((res: any) => {\n        if (res === undefined) {\n          logout()\n          history.replace(\"/\")\n        } else {\n          if (res.data.__transactions__ !== 404) {\n            let transaction = res.data.__transactions__[0]\n\n            if (transaction.payment !== undefined) {\n              if (transaction.payment.paymentStatus === \"paid\") {\n                history.replace('/redirect')\n              } else {\n                if (transaction.payment.type_payment === 'bank_slip') {\n                  warning()\n                }\n              }\n            }\n          }\n        }\n      })\n    } else if (origin === \"primeiravia\") {\n      getTransacaoPrimeira(estudante.id).then((res: any) => {\n        if (res === undefined) {\n          logout()\n          history.replace(\"/\")\n        } else {\n          if (res.data.__transactions__ !== 404) {\n            let transaction = res.data.__transactions__[0]\n\n            if (transaction.payment !== undefined) {\n              if (transaction.payment.paymentStatus === \"paid\") {\n                history.replace('/redirectprimeira')\n              } else {\n                if (transaction.payment.type_payment === 'bank_slip') {\n                  warning()\n                }\n              }\n            }\n          }\n        }\n      }\n      )\n    }\n  }, [])\n\n  const Cpf = (values: any) => {\n    if (cpf.isValid(values.target.value) === false) {\n      message.error('CPF inválido');\n    } else {\n      message.success('CPF válido');\n    }\n  }\n\n  const onFinishForm = async (values: any) => {\n    let type = 'creditcard'\n    let cepIsValid = true\n    let cpfIsValid = true\n\n    if (tabKey === \"1\") {\n      cepIsValid = validateMaskValue(values.cep, 8, \"cep\")\n      cpfIsValid = cpf.isValid(values.cpf)\n    } else if (tabKey === \"2\") {\n      cepIsValid = validateMaskValue(values.cep, 8, \"cep\")\n      cpfIsValid = cpf.isValid(values.cpf)\n      type = 'bank_slip'\n    } else {\n      type = 'pix'\n    }\n\n    if (cepExist && cepIsValid && cpfIsValid && origin === \"atualizacao\") {\n      setLoading1(true)\n\n      let response = await postTransacao(estudante.id, type, values, estudanteModel.nome, estudanteModel.email, estudanteModel.telefone)\n      if (response === undefined) {\n        logout()\n        history.replace(\"/\")\n      } else {\n        if (response.status === 200) {\n          if (tabKey === \"1\") {\n            if (response.data.errors.number === undefined) {\n              if (response.data.success) {\n                message.success(response.data.message)\n                history.replace('/atualizacao-cadastral')\n              } else {\n                message.error(\"Revise os dados do cartão.\");\n              }\n            } else {\n              message.error(\"Revise os dados do cartão.\");\n            }\n          }\n\n          if (tabKey === \"2\") {\n            setIugulPdfUrl(response.data.secure_url)\n            setVisible(true)\n          }\n          setLoading1(false)\n        } else {\n          message.error('Algo deu errado!')\n          setLoading1(false)\n        }\n      }\n    }\n    else if (cepExist && cepIsValid && cpfIsValid && origin === \"primeiravia\") {\n      setLoading1(true)\n\n      let response = await postTransacaoPrimeira(estudante.id, type, values, estudanteModel.nome, estudanteModel.email, estudanteModel.telefone)\n      if (response === undefined) {\n        logout()\n        history.replace(\"/\")\n      } else {\n        if (response.status === 200) {\n          if (tabKey === \"1\") {\n            if (response.data.errors.number === undefined) {\n              if (response.data.success) {\n                message.success(response.data.message)\n                history.replace('/primeiravia-cadastro')\n              } else {\n                message.error(\"Revise os dados do cartão.\");\n              }\n            } else {\n              message.error(\"Revise os dados do cartão.\");\n            }\n          }\n\n          if (tabKey === \"2\") {\n            setIugulPdfUrl(response.data.secure_url)\n            setVisible(true)\n          }\n          setLoading1(false)\n        } else {\n          message.error('Algo deu errado!')\n          setLoading1(false)\n        }\n      }\n    }\n    else {\n      if (!cpfIsValid) {\n        message.error('CPF inválido');\n      }\n\n      if (!cepExist) {\n        message.error('CEP inválido');\n      }\n\n      setLoading1(false)\n    }\n  }\n\n  const onFinishFailed = () => {\n    message.error('Não foi possivel salvar seus dados');\n    setLoading1(false)\n  };\n\n  const updateCEP = async (e: any) => {\n    // buscarCep(e)\n    const cepvalue = e.target.value\n    let cepData = await buscarCep(cepvalue)\n    if (cepData !== undefined) {\n      if (tabKey === '1') {\n        form1.setFieldsValue(cepData);\n        form1.setFieldsValue({ 'cidade': cepData.localidade })\n      } else if (tabKey === '2') {\n        form2.setFieldsValue(cepData)\n        form2.setFieldsValue({ 'cidade': cepData.localidade })\n      }\n\n      setCepExist(true)\n    } else {\n      setCepExist(false)\n    }\n  }\n\n  const getResumoPedido = () => {\n    return (\n      <div id={\"divInformacoes\"}>\n        <div id={\"divLogoIugul\"}>\n          <p>Pagamento Transparente</p>\n          <img src={logoIugul} />\n        </div>\n        <p id={\"titleInformacoes\"}>Resumo do pedido {cepExist}</p>\n        <Row className={\"divProduct\"}>\n          <Col span={10}>\n            <p id={\"titleDescriptionProduto\"}><b>Produto</b></p>\n          </Col>\n          <Col span={7} style={{ display: \"flex\", flexDirection: \"row-reverse\" }}>\n            <p id={\"titleDescriptionProduto\"}><b>Qtde.</b></p>\n          </Col>\n          <Col span={7} style={{ display: \"flex\", flexDirection: \"row-reverse\" }}>\n            <p id={\"titleDescriptionProduto\"}><b>Valor</b></p>\n          </Col>\n        </Row>\n        <div id={\"divider\"} />\n        <Row className={\"divProduct\"}>\n          <Col span={10}>\n            <p id={\"subTitleDescriptionProduto\"}>Atualização Cadastral</p>\n          </Col>\n          <Col span={7} style={{ display: \"flex\", flexDirection: \"row-reverse\" }}>\n            <p id={\"subTitleDescriptionProduto\"}>1x</p>\n          </Col>\n          <Col span={7} style={{ display: \"flex\", flexDirection: \"row-reverse\" }}>\n            <p id={\"subTitleDescriptionProduto\"}>R$ {(valueDefault).toFixed(2)}</p>\n          </Col>\n        </Row>\n        <div id={\"divider\"} />\n        <Row className={\"divProduct\"}>\n          <Col span={12}>\n            <p id={\"subTitleTotalProduto\"}>Valor total do pedido</p>\n          </Col>\n          <Col span={12} style={{ display: \"flex\", flexDirection: \"row-reverse\" }}>\n            <p id={\"subTitleTotalProduto\"}>R$ {(valueDefault + valuePlus()).toFixed(2)}</p>\n          </Col>\n        </Row>\n        <br />\n        <br />\n        {tabKey !== \"3\" ?\n          (\n            <span style={{ display: \"flex\", flexDirection: \"column-reverse\", width: \"100%\", height: \"100%\", paddingBottom: \"16px\" }}>\n              {visible ?\n                (\n                  <Button\n                    id={\"buttonDownloadPDF\"}\n                    onClick={() => {\n                      modal.info(config);\n                    }}>\n                    <a id={\"aBtnDownload\"} href={iugulPdfUrl + \".pdf\"} target=\"_blank\" rel=\"noreferrer\">\n                      <DownloadOutlined />\n                      <p>Baixar o boleto</p>\n                    </a>\n                  </Button>\n                ) : (\n                  <Button\n                    id={\"buttonPagamento\"}\n                    loading={loading1}\n                    onClick={() => {\n                      setLoading1(true)\n                      tabKey === '1' ? form1.submit() : form2.submit()\n                    }}>\n                    Confirmar pedido\n                  </Button>\n                )\n              }\n            </span>\n          ) : (\n            <div />\n          )\n        }\n\n      </div>\n    )\n  }\n\n  const steps = [\n    {\n      title: 'Pagamento',\n      titleCutted: 'Pagamento',\n      icon: <CreditCardOutlined />\n    },\n    {\n      title: 'Informação do Estudante',\n      titleCutted: 'Info Estudante',\n      icon: <UserOutlined />\n    },\n    {\n      title: 'Foto do Estudante',\n      titleCutted: 'Foto Estudante',\n      icon: <PictureOutlined />\n    },\n    {\n      title: 'Documento de Identificação',\n      titleCutted: 'Identificação',\n      icon: <SolutionOutlined />\n    },\n    {\n      title: 'Comprovante de Matrícula',\n      titleCutted: 'Matrícula',\n      icon: <FileDoneOutlined />\n    },\n    {\n      title: 'Documento de Endereço',\n      titleCutted: 'Endereço',\n      icon: <HomeOutlined />\n    },\n    {\n      title: 'Carteira atual',\n      titleCutted: 'Carteira atual',\n      icon: <IdcardOutlined />\n    },\n  ];\n\n  const warning = () => {\n    Modal.warning({\n      title: 'Estado do pagamento',\n      content: (\n        <div>\n          <br />\n          <Alert message={\"Em processamento\"} type=\"warning\" />\n          <br />\n          <p>O seu boleto pode levar até 3 dias úteis para ser compensado, a partir da data do pagamento.</p>\n        </div>\n      ),\n      okText: 'Entendi',\n      onOk() { },\n    });\n  }\n\n  let mensagemTopo = <p style={{ margin: \"0px\" }}>A <b>ATUALIZAÇÃO CADASTRAL</b> agora é <i>online</i>! Ficou mais fácil, prático e você economiza tempo.</p>\n  let subMensagemTopo = <p style={{ margin: \"0px\" }}>Faça sua <b>ATUALIZAÇÃO CADASTRAL ONLINE</b> por R$ 7,85, ou dirija-se a Central de Atendimento para realizar sua atualização cadastral presencial e sem custo na Avenida Maranhão, nº 28, Centro/Norte.</p>\n  let subMensagemTopo2 = <p style={{ margin: \"0px\" }}>A confirmação de pagamento será enviada por email.</p>\n\n  return (\n    <div className={\"fullDiv\"}>\n      <Header />\n      <br />\n      <div className={\"divDados\"}>\n        <Row>\n          <Col xs={0} sm={0} md={0} lg={1} xl={2} />\n          <Col xs={24} sm={24} md={24} lg={22} xl={20}>\n            <Row className={\"divSteps divWithBoxShadow\"}>\n              <Col xs={0} sm={0} md={0} lg={24} xl={24}>\n                <Steps current={0} size={\"small\"}>\n                  {steps.map((item: any) => (\n                    <Step\n                      key={item.title}\n                      title={item.titleCutted}\n                      icon={item.icon}\n                    />\n                  ))}\n                </Steps>\n              </Col>\n\n              <Col xs={24} sm={24} md={24} lg={0} xl={0}>\n                <Steps current={0} size={\"small\"}>\n                  {steps.map((item: any) => (\n                    <Step\n                      key={item.title}\n                      icon={item.icon}\n                    />\n                  ))}\n                </Steps>\n              </Col>\n            </Row>\n          </Col>\n          <Col xs={0} sm={0} md={0} lg={1} xl={2} />\n        </Row>\n\n        <Row style={{ marginTop: \"16px\" }}>\n          <Col xs={0} sm={0} md={1} lg={1} xl={2} />\n          <Col xs={24} sm={24} md={22} lg={22} xl={20}>\n            <Alert style={{ marginBottom: \"16px\" }} showIcon closable message={mensagemTopo} description={subMensagemTopo} />\n            <Alert style={{ marginBottom: \"16px\" }} showIcon closable message={\"\"} description={subMensagemTopo2} />\n          </Col>\n          <Col xs={0} sm={0} md={1} lg={1} xl={2} />\n        </Row>\n        <Row>\n          <Col xs={0} sm={0} md={0} lg={1} xl={2} />\n          <Col xs={24} sm={24} md={24} lg={0} xl={0} />\n          <Col id={\"divFormPagamento\"} xs={24} sm={24} md={24} lg={20} xl={20}>\n            <p className={\"divTitleMainP\"}>Pagamento</p>\n            <p className={\"subTitleMainP\"}>Selecione o tipo de pagamento</p>\n            <Row>\n              <Col span={24}>\n                <Tabs onChange={updateTab} defaultActiveKey={tabKey} type=\"card\" style={{ padding: '0' }}>\n                  <TabPane\n                    tab={\n                      <span>\n                        <CreditCardOutlined />\n                      Cartão de crédito\n                    </span>\n                    }\n                    key=\"1\"\n                  >\n                    <Row style={{ minHeight: \"10vh\", paddingBottom: \"2vh\" }}>\n                      <Col xs={24} sm={24} md={24} lg={16} xl={16}>\n                        <div className={\"cardForm\"}>\n                          <p className={\"titleInformeDadosPagador\"}>Informe os dados do pagador</p>\n                          <Form form={form1} onFinish={onFinishForm} onFinishFailed={onFinishFailed}>\n                            <Row>\n                              <Col xs={2} sm={2} md={2} lg={0} xl={0} />\n                              <Col xs={0} sm={0} md={0} lg={0} xl={6}>\n                                <br />\n                                <div>\n                                  <Cards\n                                    cvc={cvc}\n                                    name={nomec}\n                                    number={numero}\n                                    expiry={datev}\n                                    focused={focused}\n                                    locale={{ valid: 'valido até' }}\n                                    placeholders={{ name: 'Seu nome aqui' }}\n                                  />\n                                </div>\n                              </Col>\n                              <Col xs={0} sm={0} md={0} lg={0} xl={1} />\n                              <Col xs={24} sm={24} md={24} lg={24} xl={17}>\n                                <Row>\n                                  {/* dados cartao */}\n                                  <Col xs={24} sm={24} md={12} lg={12} xl={12}>\n                                    <p className={\"labelInputField\"}>* Numero do Cartão:</p>\n                                    <Form.Item\n                                      name=\"numerocartao\"\n                                      rules={[\n                                        {\n                                          required: true,\n                                          message: 'Insira o numero do seu Cartão',\n                                        },\n                                      ]}\n                                    >\n                                      <InputMask\n                                        className={\"inputText\"}\n                                        name=\"numero\"\n                                        inputMode=\"numeric\"\n                                        onChange={(e) => setNumero(e.target.value)}\n                                        onFocus={changeFocus}\n                                        mask=\"1111 1111 1111 1111\"\n                                      />\n                                    </Form.Item>\n                                  </Col>\n                                  <Col xs={16} sm={16} md={4} lg={8} xl={8}>\n                                    <p className={\"labelInputField\"}>Vencimento:</p>\n                                    <Form.Item\n                                      name=\"vencimento\"\n                                      labelCol={{ span: 24 }}\n                                      rules={[\n                                        {\n                                          required: true,\n                                          message: 'Insira a data de vencimento do cartão',\n                                        },\n                                      ]}\n                                    >\n                                      <InputMask\n                                        className={\"inputText\"}\n                                        name=\"datev\"\n                                        // eslint-disable-next-line\n                                        onChange={(e) => setDatev(e.target.value)}\n                                        onFocus={changeFocus}\n                                        mask=\"11/1111\"\n                                        inputMode=\"numeric\"\n                                        placeholder=\"(MM/AAAA)\"\n                                      />\n                                    </Form.Item>\n\n                                  </Col>\n                                  <Col xs={8} sm={8} md={8} lg={4} xl={4}>\n                                    <p className={\"labelInputField\"}>* CVV:</p>\n                                    <Form.Item\n                                      name=\"cvc\"\n                                      labelCol={{ span: 24 }}\n                                      rules={[\n                                        {\n                                          required: true,\n                                          message: 'Insira o CVV do cartão',\n                                        },\n                                      ]}\n                                    >\n                                      <MaskedInput\n                                        className={\"inputText\"}\n                                        mask=\"111\"\n                                        name=\"cvc\"\n                                        inputMode=\"numeric\"\n                                        // eslint-disable-next-line\n                                        onChange={(e) => setCvc(e.target.value)}\n                                        onFocus={changeFocus}\n                                      />\n                                    </Form.Item>\n                                  </Col>\n                                </Row>\n                                <Row>\n                                  <Col xs={24} sm={24} md={24} lg={14} xl={14}>\n                                    <p className={\"labelInputField\"}>* Nome do titular do cartão:</p>\n                                    <Form.Item\n                                      name=\"name\"\n                                      labelCol={{ span: 24 }}\n                                      rules={[\n                                        {\n                                          required: true,\n                                          message: 'Insira um nome',\n                                        },\n                                      ]}\n                                    >\n                                      <Input className=\"inputText\" name=\"nomec\" onChange={(e) => setNomec(e.target.value)} onFocus={changeFocus} />\n                                    </Form.Item>\n                                  </Col>\n                                  <Col xs={24} sm={24} md={24} lg={10} xl={10}>\n                                    <p className={\"labelInputField\"}>* CPF:</p>\n                                    <Form.Item\n                                      name=\"cpf\"\n                                      labelCol={{ span: 24 }}\n                                      rules={[\n                                        {\n                                          required: true,\n                                          message: 'INSIRA SEU CPF',\n                                        },\n                                      ]}\n                                    >\n                                      <InputMask\n                                        className=\"inputText\"\n                                        mask=\"111.111.111-11\"\n                                        inputMode=\"numeric\"\n                                        onBlur={Cpf}\n                                        onFocus={changeFocus}\n                                      />\n                                    </Form.Item>\n                                  </Col>\n                                </Row>\n                                <br />\n                              </Col>\n                            </Row>\n                            <Row>\n                              {/* cep */}\n                              <Col xs={24} sm={24} md={24} lg={4} xl={5}>\n                                <p className={\"labelInputField\"}>* CEP:</p>\n                                <Form.Item\n                                  name=\"cep\"\n                                  labelCol={{ span: 24 }}\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: 'Insira seu Cep',\n                                    },\n                                  ]}\n                                >\n                                  <InputMask\n                                    className=\"inputText\"\n                                    mask=\"11.111-111\"\n                                    inputMode=\"numeric\"\n                                    onBlur={updateCEP}\n                                    onFocus={changeFocus}\n                                  />\n                                </Form.Item>\n                              </Col>\n                              <Col xs={24} sm={24} md={24} lg={8} xl={9}>\n                                <p className={\"labelInputField\"}>* Logradouro:</p>\n                                <Form.Item\n                                  name=\"logradouro\"\n                                  labelCol={{ span: 24 }}\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: 'Insira o logradouro',\n                                    },\n                                  ]}\n                                >\n                                  <Input id=\"localdouro\" className={\"inputText\"} onFocus={changeFocus} />\n                                </Form.Item>\n                              </Col>\n                              <Col xs={24} sm={24} md={24} lg={4} xl={4}>\n                                <p className={\"labelInputField\"}>* Número:</p>\n                                <Form.Item\n                                  name=\"numerocasa\"\n                                  labelCol={{ span: 24 }}\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: 'Insira o número da casa',\n                                    },\n                                  ]}\n                                >\n                                  <Input type=\"number\" className={\"inputText\"} onFocus={changeFocus} />\n                                </Form.Item>\n                              </Col>\n                              <Col xs={24} sm={24} md={24} lg={8} xl={6} >\n                                <p className={\"labelInputField\"}>* Bairro:</p>\n                                <Form.Item\n                                  name=\"bairro\"\n                                  labelCol={{ span: 24 }}\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: 'Insira seu bairro',\n                                    },\n                                  ]}\n                                >\n                                  <Input className={\"inputText\"} onFocus={changeFocus} />\n                                </Form.Item>\n                              </Col>\n                            </Row>\n                            <Row>\n                              {/* complemento */}\n                              <Col xs={24} sm={24} md={24} lg={10} xl={10}>\n                                <p className={\"labelInputField\"}>Complemento:</p>\n                                <Form.Item\n                                  name={\"complemento\"}\n                                  labelCol={{ span: 24 }}\n                                // rules={[\n                                //   {\n                                //     required: true,\n                                //     message: 'Insira sua cidade',\n                                //   },\n                                // ]}\n                                >\n                                  <Input className=\"inputText\" onFocus={changeFocus} />\n                                </Form.Item>\n                              </Col>\n                              <Col xs={24} sm={24} md={24} lg={10} xl={10}>\n                                <p className={\"labelInputField\"}>* Cidade:</p>\n                                <Form.Item\n                                  name=\"cidade\"\n                                  labelCol={{ span: 24 }}\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: 'Insira sua cidade',\n                                    },\n                                  ]}\n                                >\n                                  <Input className={\"inputText\"} onFocus={changeFocus} />\n                                </Form.Item>\n                              </Col>\n                              <Col xs={12} sm={12} md={24} lg={4} xl={4}>\n                                <p className={\"labelInputField\"}>* UF:</p>\n                                <Form.Item\n                                  name=\"uf\"\n                                  labelCol={{ span: 24 }}\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: 'Insira sua cidade',\n                                    },\n                                  ]}\n                                >\n                                  <InputMask className=\"inputText\" mask=\"AA\" onFocus={changeFocus} />\n                                </Form.Item>\n                              </Col>\n                            </Row>\n                          </Form>\n                        </div>\n                      </Col>\n                      <Col xs={24} sm={24} md={24} lg={1} xl={1} />\n                      <Col xs={24} sm={24} md={24} lg={7} xl={7}>\n                        {getResumoPedido()}\n                      </Col>\n                    </Row>\n\n                  </TabPane>\n                  <TabPane\n                    tab={\n                      <span>\n                        <BarcodeOutlined />\n                      Boleto\n                    </span>\n                    }\n                    key=\"2\"\n                  >\n                    <Form form={form2} onFinish={onFinishForm} onFinishFailed={onFinishFailed}>\n                      <Row style={{ minHeight: \"10vh\", paddingBottom: \"2vh\" }}>\n                        <Col span={24} lg={16} xl={16}>\n                          <div className={\"cardForm\"}>\n                            <Row style={{ paddingLeft: \"6px\" }}>\n                              <Col span={1} />\n                              <Col span={22}>\n                                <p className={\"titleInformeDadosPagador\"}>Informe os dados do pagador</p>\n                              </Col>\n                              <Col span={1} />\n                            </Row>\n                            <Row className=\"tab2\">\n                              <Col span={0} lg={1} xl={1} />\n                              <Col xs={24} sm={24} md={24} lg={8} xl={8}>\n                                <p className={\"labelInputField\"}>* CPF:</p>\n                                <Form.Item\n                                  name=\"cpf\"\n                                  labelCol={{ span: 24 }}\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: 'Insira o seu CPF',\n                                    },\n                                  ]}\n                                >\n                                  <InputMask\n                                    mask=\"111.111.111-11\"\n                                    className=\"inputText\"\n                                    onBlur={Cpf}\n                                  />\n                                </Form.Item>\n                              </Col>\n                              <Col xs={24} sm={24} md={24} lg={14} xl={14}>\n                                <p className={\"labelInputField\"}>Nome Completo:</p>\n                                <Form.Item\n                                  name=\"name\"\n                                  labelCol={{ span: 24 }}\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: 'Insira um nome',\n                                    },\n                                  ]}\n                                >\n                                  <Input className=\"inputText\" />\n                                </Form.Item>\n                              </Col>\n                              <Col span={0} lg={1} xl={1} />\n                            </Row>\n                            <Row>\n                              <Col span={0} lg={1} xl={1} />\n                              <Col xs={24} sm={24} md={24} lg={6} xl={6}>\n                                <p className={\"labelInputField\"}>* CEP:</p>\n                                <Form.Item\n                                  name=\"cep\"\n                                  labelCol={{ span: 24 }}\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: 'Insira seu Cep',\n                                    },\n                                  ]}\n                                >\n                                  <InputMask mask=\"11.111-111\" onBlur={updateCEP} className=\"inputText\" />\n                                </Form.Item>\n                              </Col>\n                              <Col xs={24} sm={24} md={24} lg={10} xl={10}>\n                                <p className={\"labelInputField\"}>* Logradouro:</p>\n                                <Form.Item\n                                  name=\"logradouro\"\n                                  labelCol={{ span: 24 }}\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: 'Insira o logradouro',\n                                    },\n                                  ]}\n                                >\n                                  <Input className=\"inputText\" />\n                                </Form.Item>\n                              </Col>\n                              <Col xs={24} sm={24} md={24} lg={6} xl={6}>\n                                <p className={\"labelInputField\"}>* Número:</p>\n                                <Form.Item\n                                  name=\"numerocasa\"\n                                  labelCol={{ span: 24 }}\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: 'Insira o numero da casa',\n                                    },\n                                  ]}\n                                >\n                                  <Input type=\"number\" className=\"inputText\" />\n                                </Form.Item>\n                              </Col>\n                              <Col span={0} lg={1} xl={1} />\n                            </Row>\n\n                            <Row>\n                              <Col span={0} lg={1} xl={1} />\n                              <Col xs={24} sm={24} md={24} lg={8} xl={8}>\n                                <p className={\"labelInputField\"}>* Bairro:</p>\n                                <Form.Item\n                                  name=\"bairro\"\n                                  labelCol={{ span: 24 }}\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: 'Insira seu bairro',\n                                    },\n                                  ]}\n                                >\n                                  <Input className=\"inputText\" />\n                                </Form.Item>\n                              </Col>\n                              <Col xs={24} sm={24} md={24} lg={8} xl={8}>\n                                <p className={\"labelInputField\"}>* Cidade:</p>\n                                <Form.Item\n                                  name=\"cidade\"\n                                  labelCol={{ span: 24 }}\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: 'Insira sua cidade',\n                                    },\n                                  ]}\n                                >\n                                  <Input className=\"inputText\" />\n                                </Form.Item>\n                              </Col>\n                              <Col xs={24} sm={24} md={24} lg={6} xl={6}>\n                                <p className={\"labelInputField\"}>* UF:</p>\n                                <Form.Item\n                                  name=\"uf\"\n                                  labelCol={{ span: 24 }}\n                                  rules={[\n                                    {\n                                      required: true,\n                                      message: 'Insira seu estado',\n                                    },\n                                  ]}\n                                >\n                                  <InputMask mask=\"AA\" className=\"inputText\" />\n                                </Form.Item>\n                              </Col>\n                              <Col span={0} lg={1} xl={1} />\n                            </Row>\n                          </div>\n                        </Col>\n                        <Col span={24} lg={1} xl={1} />\n                        <Col span={24} lg={7} xl={7}>\n                          {getResumoPedido()}\n                        </Col>\n\n                      </Row>\n                    </Form>\n                  </TabPane>\n                  <TabPane\n                    tab={\n                      <span>\n                        <AppstoreOutlined rotate={45} />\n                      Pix\n                    </span>\n                    }\n                    key=\"3\"\n                  >\n                    <Row>\n                      <Col xs={0} sm={0} md={0} lg={3} xl={7}></Col>\n\n                      <Col className={\"cardForm\"} style={{ padding: \"16px\" }} xs={24} sm={24} md={24} lg={18} xl={10}>\n                        <div id={\"divLogoIugul\"}>\n                          <p>Pagamento Transparente</p>\n                          <img src={logoIugul} />\n                        </div>\n                        <div>\n                          <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n                            <img src={\"https://logospng.org/download/pix/logo-pix-icone-256.png\"} alt={\"pix_img\"} style={{ height: \"24px\", marginRight: \"6px\" }} />\n                            <p className={\"subTitleMainP\"} style={{ fontSize: \"18px\" }}>Pagar com Pix</p>\n                          </div>\n                          <br />\n                          <p className={\"subTitleDescriptionProduto\"}>Pague com o <b>Pix</b> em qualquer dia e a qualquer hora! O pagamento é instantâneo, prático e pode\n                              ser feito em poucos segundos. Rápido e seguro.</p>\n                          <div style={{ minHeight: \"30vh\" }}>\n                            <Row>\n                              <Col xs={24} sm={24} md={24} lg={12} xl={12} style={{ display: \"flex\", flexDirection: \"column\", alignItems: 'center', justifyContent: \"center\" }}>\n                                {\n                                  !hasGeneratedQrCode ?\n                                    (\n                                      <Button onClick={() => {\n                                        setLoading(true)\n                                        if (originVar === \"atualizacao\") {\n                                          postTransacao(estudante.id, 'pix', {}, estudanteModel.nome, estudanteModel.email, estudanteModel.telefone).then((res: any) => {\n                                            setLoading(false)\n                                            setImgQrCodePixUrl(res.data.pix.qrcode)\n                                            setQrCodePixUrl(res.data.pix.qrcode_text)\n                                            setQRCodeGenerated(true)\n                                            setIdPix(res.data.id)\n                                          })\n                                        }\n                                        else if (originVar === \"primeiravia\") {\n                                          postTransacaoPrimeira(estudante.id, 'pix', {}, estudanteModel.nome, estudanteModel.email, estudanteModel.telefone).then((res: any) => {\n                                            setLoading(false)\n                                            setImgQrCodePixUrl(res.data.pix.qrcode)\n                                            setQrCodePixUrl(res.data.pix.qrcode_text)\n                                            setQRCodeGenerated(true)\n                                            setIdPix(res.data.id)\n                                          })\n                                        }\n                                      }} loading={loading} type=\"primary\" shape=\"round\" icon={<QrcodeOutlined />} size={\"middle\"}>\n                                        Gerar QR Code\n                                      </Button>\n                                    ) : (\n                                      <div className={\"divLinkPix\"}>\n                                        <img id={\"imgQrCode\"} alt={\"pix_qr_code\"} src={imgQrCodePixUrl} />\n                                        <CopyToClipboard text={qrCodePixUrl} onCopy={() => message.info(\"Copiado!\")}>\n                                          <Button type={\"link\"}>Ou copie o link para pagar.</Button>\n                                        </CopyToClipboard>\n                                        <br />\n                                      </div>\n                                    )\n                                }\n                              </Col>\n                              <Col xs={24} sm={24} md={24} lg={12} xl={12}>\n                                <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                                  <div style={{ height: \"33%\", width: \"100%\", marginTop: \"8px\" }}>\n                                    <p style={{ fontSize: \"16px\" }}><b>1.</b> abra o app do seu banco ou instituição financeira e entre no ambiente <b>Pix</b>.</p>\n                                  </div>\n                                  <div style={{ height: \"33%\", width: \"100%\" }}>\n                                    <p style={{ fontSize: \"16px\" }}><b>2.</b> escolha a opção <b>pagar com o qr code</b>  e escaneie o código ao lado.</p>\n                                  </div>\n                                  <div style={{ height: \"33%\", width: \"100%\" }}>\n                                    <p style={{ fontSize: \"16px\" }}><b>3.</b> confirme as informações e finalize a compra.</p>\n                                  </div>\n                                </div>\n                              </Col>\n                            </Row>\n                          </div>\n                          <div id={\"divider\"} />\n                          <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: 'space-between' }}>\n                            <p className={\"subTitleMainP\"}><b>Total:</b></p>\n                            <p className={\"subTitleMainP\"}><b>R$ {(valueDefault + valuePlus()).toFixed(2)}</b></p>\n                          </div>\n                        </div>\n                      </Col>\n                      <Col xs={0} sm={0} md={0} lg={3} xl={7}></Col>\n                    </Row>\n                  </TabPane>\n                </Tabs>\n              </Col>\n            </Row>\n\n          </Col>\n        </Row>\n        <Col xs={0} sm={0} md={0} lg={1} xl={2} />\n      </div>\n      { contextHolder}\n      {/* <Footer /> */}\n    </div >\n  );\n}","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\pages\\recuperar_senha\\RecSenha.tsx",[],"C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\pages\\recuperar_senha\\SegRecuperacao.tsx",["177","178"],"/* eslint-disable no-restricted-globals */\nimport React, { useEffect, useState } from 'react';\n// eslint-disable-next-line object-curly-newline\nimport { Col, Row, Form, Input, Button, message } from 'antd';\nimport 'antd/dist/antd.css';\nimport './RecSenha.css';\nimport '../../globals/globalStyle.css'\nimport { changePassword, changePasswordLogged, validarHash } from '../../services/AccessServices';\nimport { useHistory } from 'react-router-dom';\nimport HeaderSimple from '../../visual_components/header/HeaderSimple';\nimport { getIdUser, isLogged, logout } from '../../globals/globalFunctions';\nimport Header from '../../visual_components/header/Header';\n\n// import * as AiIcons from 'react-icons/md';\n\nexport default function SegRecupera() {\n  let history = useHistory()\n  let isLogado = false\n\n  if (isLogged()) {\n    isLogado = true\n  }\n\n  const [linkValido, setLinkValido] = useState(true)\n  const [userId, setUserId] = useState(\"\")\n  const [hash, setHash] = useState(\"\")\n\n  useEffect(() => {\n    if (isLogado) {\n      let obj = getIdUser()\n      setUserId(obj.id)\n    } else {\n      var url_splited = window.location.href.toString().split(\"/\")\n      var url_hash = url_splited[url_splited.length - 1]\n\n      validarHash(url_hash).then((res: any) => {\n        if (!res.data.error) {\n          setUserId(res.data.id)\n          setHash(url_hash)\n        } else {\n          setLinkValido(false)\n        }\n      })\n    }\n  }, [])\n\n  const [pass, setPass] = useState('');\n  const onFinish = (values: any) => {\n    if (isLogado) {\n      changePasswordLogged(userId, values.password)\n        .then((res: any) => {\n          if (res === undefined) {\n            logout()\n            history.replace(\"/\")\n          } else {\n            if (res.status === 200) {\n              if (!res.data.error) {\n                message.success('Senha alterada com sucesso');\n                history.replace(\"/redirect\")\n                history.goBack()\n              } else {\n                message.error('Algo deu errado!')\n              }\n            } else {\n              message.error('Não foi possivel alterar sua senha');\n            }\n          }\n        })\n        .catch(() => {\n          message.error('Erros ao conectar, por favor tente mais tarde');\n        })\n    } else {\n      changePassword(userId, hash, values.password)\n        .then((res: any) => {\n          if (res === undefined) {\n            logout()\n            history.replace(\"/\")\n          } else {\n            if (res.status === 200) {\n              if (!res.data.error) {\n                message.success('Senha alterada com sucesso');\n                history.replace('/')                  \n              } else {\n                message.error('Algo deu errado!')\n              }\n            } else {\n              message.error('Não foi possivel alterar sua senha');\n            }\n          }\n        })\n        .catch(() => {\n          message.error('Erros ao conectar, por favor tente mais tarde');\n        });\n    }\n  };\n  const onFinishFailed = () => {\n    message.error('por favor preencha os campo com sua nova senha');\n  };\n  return (\n    <div className={\"fullDiv\"}>\n      { \n        isLogado ? (\n          <Header />\n        ) : (\n          <HeaderSimple />\n        )\n      }\n      <div id={\"divContent\"}>\n        {linkValido ?\n          (\n            <Row>\n              <Col sm={{ span: 24 }} md={{ span: 12 }} lg={{ span: 9 }}>\n                <div />\n              </Col>\n              <Col sm={{ span: 24 }} md={{ span: 12 }} lg={{ span: 6 }}>\n                <div className={\"cardForm\"}>\n                  <Form onFinish={onFinish} onFinishFailed={onFinishFailed}>\n                    <div>\n                      <p className={\"accessFormTitle\"}>Informe sua nova senha</p>\n                      <p className={\"accessFormSubTitle\"}>\n                        Digite sua nova senha, logo apos confirme novamente a senha.\n                      </p>\n                      {/* <p>User Id: {userId}</p>\n                      <p>Hash: {hash}</p> */}\n                    </div>\n                    <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\", paddingRight: \"6px\" }}>\n                      <p className={\"labelInputField\"}>* Senha: (min. 6 caracteres)</p>\n                      <p className={\"labelInputField\"} style={{ color: pass.length < 6 ? \"red\" : \"green\" }}>{pass.length}/6</p>\n                    </div>\n                    <Form.Item\n                      name=\"password\"\n                      rules={[\n                        {\n                          required: true,\n                          message: 'Por favor insira sua senha',\n                        },\n                        {\n                          min: 6,\n                          message: \"Pelo menos 6 caracteres.\"\n                        }\n                      ]}\n                      hasFeedback\n                    >\n                      <Input.Password className={\"inputText\"} onChange={(e: any) => setPass(e.target.value)} />\n                    </Form.Item>\n\n                    <p className={\"labelInputField\"}>* Confirme sua nova senha</p>\n                    <Form.Item\n                      name=\"confirm\"\n                      dependencies={['password']}\n                      hasFeedback\n                      rules={[\n                        {\n                          required: true,\n                          message: 'Por favor confime sua senha',\n                        },\n                        ({ getFieldValue }) => ({\n                          validator(rule, value) {\n                            if (!value || getFieldValue('password') === value) {\n                              return Promise.resolve();\n                            }\n                            // eslint-disable-next-line prefer-promise-reject-errors\n                            return Promise.reject(\n                              'Suas senhas estão diferentes, confira e digite novamente!',\n                            );\n                          },\n                        }),\n                      ]}\n                    >\n                      <Input.Password className={\"inputText\"} />\n                    </Form.Item>\n                    <div id=\"btn-div\">\n                      <Button type=\"primary\" id=\"btn\" htmlType=\"submit\" className={\"greenButton buttonSolicitar\"}>\n                        Alterar senha\n                  </Button>\n                    </div>\n                  </Form>\n                </div>\n              </Col>\n              <Col sm={{ span: 24 }} md={{ span: 12 }} lg={{ span: 9 }}>\n                <div />\n              </Col>\n            </Row>\n          ) : (\n            <div id={\"divLinkExpirado\"}>\n              <h3>Link expirado!</h3>\n              <a onClick={() => { history.replace(\"/\") }}>\n                <p>Voltar para o login</p>\n              </a>\n            </div>\n          )\n        }\n      </div>\n    </div>\n  );\n}\n","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\pages\\loading\\Loading.tsx",[],"C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\globals\\globalFunctions.ts",["179","180","181","182","183","184","185","186","187","188"],"import moment from \"moment\";\nimport { message } from \"antd\";\nimport { cpf as cpfValidator } from \"cpf-cnpj-validator\";\nimport Cookies from 'universal-cookie';\nimport { getCepData } from \"../services/AccessServices\";\n\nfunction getToken() {\n  const cookies = new Cookies();\n  return cookies.get('atualizacao-cadastral-token')\n}\n\nasync function setToken(token: string) {\n  const cookies = new Cookies();\n  cookies.remove(\"atualizacao-cadastral-token\")\n  cookies.set(\"atualizacao-cadastral-token\", token)\n}\n\nfunction logout() {\n  const cookies = new Cookies();\n  cookies.remove(\"atualizacao-cadastral-token\")\n  localStorage.clear()\n}\n\nfunction responseTokenIsInvalid(response: any) {\n  if (response.data!==undefined) {\n    return response.data.message!==undefined && response.data.message === \"token invalido\"\n  } else {\n    return false\n  }\n}\n\nfunction isLogged() {\n  let estudanteLocal = localStorage.getItem(\"usuario\")\n\n  if (estudanteLocal !== null && estudanteLocal !== undefined) {\n    return true\n  }\n\n  return false\n}\n\nfunction getOptions() {\n  let retorno = []\n  retorno.push({ value: \"1\", title: \"Perda ou Roubo\" })\n  retorno.push({ value: \"2\", title: \"Cartão com defeito\" })\n  retorno.push({ value: \"3\", title: \"Cartão danificado\" })\n\n  return retorno\n}\n\nfunction getOptionsToFilter() {\n  let retorno = []\n  retorno.push({ value: \"1\", text: \"Perda ou Roubo\" })\n  retorno.push({ value: \"2\", text: \"Cartão com defeito\" })\n  retorno.push({ value: \"3\", text: \"Cartão danificado\" })\n\n  return retorno\n}\n\nfunction capitalizeFirstLetter(value: string) {\n  return value.charAt(0).toUpperCase() + value.slice(1);\n}\n\nfunction getOption(id: String) {\n  let retorno = \"\"\n  let options = getOptions()\n\n  options.forEach((it): void => {\n    if (it.value === id) {\n      retorno = it.title\n    }\n  })\n\n  return retorno\n}\n\nfunction getDateFromMoment(created_at: string): Date {\n  let date = new Date()\n\n  let created = moment(created_at, \"YYYY-MM-DD HH:mm:ss\")\n\n  date.setFullYear(created.year(), created.month() + 1, created.date())\n  date.setHours(created.hour(), created.minute(), created.second())\n\n  return date\n}\n\nfunction date1IsAfterOrEqualThenDate2(date1: Date, date2: Date) {\n  let timeDate1 = date1\n  let timeDate2 = new Date()\n  timeDate2.setFullYear(date2.getFullYear(), date2.getMonth(), date2.getDate() - 1)\n\n  return timeDate1.getTime() > timeDate2.getTime()\n}\n\nfunction maskForDate(date: Date) {\n  let retorno = \"\"\n\n  if (date.getDate() < 10) {\n    retorno += (\"0\" + date.getDate() + \"/\")\n  } else {\n    retorno += (date.getDate() + \"/\")\n  }\n\n  if (date.getMonth() < 9) {\n    retorno += (\"0\" + (date.getMonth()) + \"/\")\n  } else {\n    retorno += ((date.getMonth()) + \"/\")\n  }\n  retorno += date.getFullYear()\n\n  return retorno\n}\n\nfunction validateNome(value: any) {\n\n  if (value.split(\" \").length > 1) {\n    return true;\n  } else {\n    message.error(\"O nome é inválido!\");\n    return false;\n  }\n};\n\nfunction validateEmail(value: any) {\n  const re = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n\n  if (re.test(value.toLowerCase())) {\n    return true;\n  } else {\n    message.error(\"O e-mail é inválido!\");\n    return false;\n  }\n};\n\nfunction checkDateFieldData(date: string[]) {\n  let newDay = \"\";\n  let newMonth = \"\";\n  let newYear = \"\";\n\n  if (date.length>1) {\n    for (let index = 0; index < date[0].length; index++) {\n      let element = parseInt(date[0].charAt(index));\n      if (!isNaN(element)) {\n        newDay += element;\n      }\n    }\n  \n    for (let index = 0; index < date[1].length; index++) {\n      let element = parseInt(date[1].charAt(index));\n      if (!isNaN(element)) {\n        newMonth += element;\n      }\n    }\n  \n    for (let index = 0; index < date[2].length; index++) {\n      let element = parseInt(date[2].charAt(index));\n      if (!isNaN(element)) {\n        newYear += element;\n      }\n    }\n  \n    if (newDay.length<2) {\n      return 1\n    } else if (newMonth.length<2) {\n      return 1\n    } else if (newYear.length<4) {\n      return 1\n    } else {\n      return 0\n    }\n  \n  } else {\n    return 1\n  }\n}\n\nfunction validatePhone(oldValue: any, type: string) {\n  let newValue = \"\";\n\n  for (let index = 0; index < oldValue.length; index++) {\n    let element = parseInt(oldValue.charAt(index));\n    if (!isNaN(element)) {\n      newValue += element;\n    }\n  }\n\n  if (newValue.length === 11) {\n    return true;\n  } else {\n    if (type==='phone') {\n      message.error(\"O telefone é inválido!\");\n    } else {\n      message.error(\"O whatsapp é inválido!\");\n    }\n    return false;\n  }\n};\n\nfunction validateMaskValue(oldValue: any, sizeExpected: number, field: string) {\n  let newValue = \"\";\n\n  for (let index = 0; index < oldValue.length; index++) {\n    let element = parseInt(oldValue.charAt(index));\n    if (!isNaN(element)) {\n      newValue += element;\n    }\n  }\n\n  if (newValue.length === sizeExpected) {\n    return true;\n  } else {\n    message.error(`O ${field} é inválido!`);\n    return false;\n  }\n}\n\nfunction validateCPF(value: any) {\n\n  if (cpfValidator.isValid(value)) {\n    return true;\n  } else {\n    message.error(\"O CPF é inválido!\");\n    return false;\n  }\n};\n\nfunction validateEscola(value: any) {\n\n  if (value.length > 0) {\n    return true;\n  } else {\n    message.error(\"O nome da escola é inválido!\");\n    return false;\n  }\n};\n\nfunction getIdUser() {\n  let obj = { id: \"1\" }\n  let lsobj = localStorage.getItem(\"usuario\")\n  if (lsobj !== undefined && lsobj !== null) {\n    obj = JSON.parse(lsobj)\n  }\n\n  return obj\n}\n\n\nasync function getBase64(file: any) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = error => reject(error);\n  });\n}\n\nasync function buscarCep(value: any) {\n  // limpar mascara\n  const cepvalue = value.toString().replace('.', '').replace('-', '')\n  if (cepvalue.length === 8) {\n    let response = await getCepData(cepvalue)\n\n    if (response.data.erro === true) {\n      message.error('CEP não encontrado');\n      return undefined\n    } else {\n      return (response.data);\n    }\n\n  } else if (cepvalue.length < 8) {\n    message.error('CEP incompleto');\n    return undefined\n  }\n};\n\nexport {\n  getToken,\n  setToken,\n  logout,\n  responseTokenIsInvalid,\n  isLogged,\n  capitalizeFirstLetter,\n  getOptions,\n  getOptionsToFilter,\n  getOption,\n  getDateFromMoment,\n  maskForDate,\n  date1IsAfterOrEqualThenDate2,\n  validateNome,\n  validateEmail,\n  checkDateFieldData,\n  validatePhone,\n  validateCPF,\n  validateMaskValue,\n  validateEscola,\n  getIdUser,\n  getBase64,\n  buscarCep\n}","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\services\\AccessServices.ts",[],"C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\services\\SolicitacoesService.ts",[],"C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\services\\PagamentosServices.ts",[],"C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\visual_components\\header\\Header.tsx",["189"],"import \"antd/dist/antd.css\";\nimport \"./Header.css\";\nimport { Col, Row, Menu, Drawer } from \"antd\";\nimport { useHistory } from \"react-router-dom\";\nimport { capitalizeFirstLetter, logout } from \"../../globals/globalFunctions\";\nimport { CaretDownFilled, FileSyncOutlined, LockOutlined, MenuOutlined } from \"@ant-design/icons\";\nimport { useState } from \"react\";\n\nfunction Header() {\n  let history = useHistory()\n  let estudante = { id: \"\", nome: \"\" }\n  let estudanteLocal = localStorage.getItem(\"usuario\")\n\n  if (estudanteLocal !== null && estudanteLocal !== undefined) {\n    estudante = JSON.parse(estudanteLocal)\n  }\n\n  const [visible, setVisible] = useState(false)\n  const { SubMenu } = Menu;\n\n  const handleClick = (e: any) => {\n    if (e.key === \"setting:atualizacao\") {\n      localStorage.setItem(\"functionLooked\", \"atualizacao\")\n      history.push(\"/redirect\")\n    }\n\n    if (e.key === \"setting:bloqueio\") {\n      localStorage.setItem(\"functionLooked\", \"bloqueio\")\n      history.push(\"/redirect\")\n    }\n\n    if (e.key === \"setting:redefinir\") {\n      history.push(\"/redefinir-senha\")\n    }\n\n    if (e.key === \"setting:sair\") {\n      logout()\n      history.replace('/')\n    }\n  };\n\n  const showDrawer = () => {\n    setVisible(true);\n  };\n\n  const onClose = () => {\n    setVisible(false);\n  };\n\n\n  return (\n    <div className={\"divContainerHeader\"}>\n      <Drawer\n        title={\"Bem-vindo, \" + capitalizeFirstLetter(estudante.nome.split(\" \")[0])}\n        placement=\"left\"\n        closable={false}\n        onClose={onClose}\n        visible={visible}\n      >\n        <Menu onClick={handleClick} mode=\"inline\">\n          {/* <SubMenu key=\"SubMenu\" icon={<CaretDownFilled />} title={\"Bem-vindo, \" + capitalizeFirstLetter(estudante.nome.split(\" \")[0])}>  */}\n          <Menu.ItemGroup>\n            <Menu.Item key=\"setting:atualizacao\">Atualização Cadastral</Menu.Item>\n            <Menu.Item key=\"setting:bloqueio\">Solicitações de Bloqueio</Menu.Item>\n\n          </Menu.ItemGroup>\n          <Menu.ItemGroup title=\"Área do estudante\">\n            <Menu.Item key=\"setting:redefinir\">Redefinir Senha</Menu.Item>\n            <Menu.Item key=\"setting:sair\">Sair</Menu.Item>\n          </Menu.ItemGroup>\n          {/* </SubMenu> */}\n        </Menu>\n      </Drawer>\n      <Row>\n        {/* sizes: sm md lg xl */}\n        <Col xs={1} sm={1} md={1} lg={2} xl={2} />\n        <Col xs={3} sm={3} md={2} lg={0} xl={0}>\n          <a onClick={showDrawer}>\n            <MenuOutlined style={{ color: \"#000\", fontSize: \"4vh\", marginTop: \"1vh\" }} />\n          </a>\n        </Col>\n        <Col id={\"divLogoHeader\"} xs={8} sm={8} md={7} lg={2} xl={2}>\n          <img id={\"logoHeader\"} src={\"http://transmobibeneficios.com.br/estudante/assets/images/logo.svg\"} alt={\"logo transmobi\"} />\n        </Col>\n        <Col span={0} lg={2} xl={2} />\n        <Col className={\"invertedDiv\"} xs={0} sm={0} md={0} lg={15} xl={15}>\n          <Menu onClick={handleClick} mode=\"horizontal\" style={{ border: \"none\" }}>\n            <Menu.Item key=\"setting:atualizacao\" icon={<FileSyncOutlined />}>Atualização Cadastral</Menu.Item>\n            <Menu.Item key=\"setting:bloqueio\" icon={<LockOutlined />}>Bloqueio</Menu.Item>\n            <SubMenu key=\"SubMenu\" title={\"Bem-vindo, \" + capitalizeFirstLetter(estudante.nome.split(\" \")[0])} icon={<CaretDownFilled />}>\n              <Menu.ItemGroup title=\"Área do estudante\">\n                <Menu.Item key=\"setting:redefinir\">Redefinir Senha</Menu.Item>\n                <Menu.Item key=\"setting:sair\">Sair</Menu.Item>\n              </Menu.ItemGroup>\n            </SubMenu>\n          </Menu>\n\n          {/* {notShowEndSession(history) ?\n            (\n              <Menu onClick={handleClick} mode=\"horizontal\">\n                <SubMenu key=\"SubMenu\" icon={<CaretDownFilled />} title={\"Bem-vindo, \" + capitalizeFirstLetter(estudante.nome.split(\" \")[0])}>\n                  <Menu.ItemGroup title=\"Área do estudante\">\n                    <Menu.Item key=\"setting:atualizacao\">Atualização Cadastral</Menu.Item>\n                    <Menu.Item key=\"setting:bloqueio\">Solicitações de Bloqueio</Menu.Item>\n                    <Menu.Item key=\"setting:sair\">Sair</Menu.Item>\n                  </Menu.ItemGroup>\n                </SubMenu>\n              </Menu>\n            ) : (\n              <p />\n            )\n          } */}\n        </Col>\n        <Col xs={3} sm={3} md={4} lg={2} xl={2} />\n      </Row>\n    </div>\n  );\n}\n\nexport default Header;","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\visual_components\\header\\HeaderSimple.tsx",["190"],"import \"antd/dist/antd.css\";\nimport \"./Header.css\";\nimport { Col, Row } from \"antd\";\nimport { useHistory } from \"react-router-dom\";\nimport { ArrowLeftOutlined } from \"@ant-design/icons\";\n\nfunction HeaderSimple() {\n  let history = useHistory()\n  let path = history.location.pathname\n\n  return (\n    <div className={\"divContainerHeader\"}>\n      <Row>\n        <Col xs={1} sm={1} md={2} lg={3} xl={3} />\n        <Col xs={2} sm={2} md={2} lg={3} xl={3} id={\"buttonBackHeader\"} className={\"centerVertical noPadding \"}>\n          {path === \"/registro\" || path === \"/nova-solicitacao\" || path === \"/esqueci-minha-senha\" ?\n            (\n              <a id={\"aBackLogin\"} onClick={() => history.goBack()}>\n                <ArrowLeftOutlined id={\"buttonBackLogin\"} />\n              </a>\n            ) : (\n              <div />\n            )\n          }\n        </Col>\n        <Col id={\"divLogoHeaderSimple\"} xs={18} sm={18} md={16} lg={12} xl={12}>\n          <img id={\"logoHeaderSimple\"} src={\"http://transmobibeneficios.com.br/estudante/assets/images/logo.svg\"} alt={\"logo transmobi\"} />\n        </Col>\n        <Col xs={3} sm={3} md={4} lg={6} xl={6} />\n      </Row>\n    </div>\n  );\n}\n\nexport default HeaderSimple;","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\visual_components\\modals\\ModalContent.tsx",[],"C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\visual_components\\footer\\FooterSimple.tsx",[],"C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\services\\Api.tsx",[],"C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\visual_components\\modals\\ModalVerifyInfoEstudante.tsx",["191"],"import { useEffect, useState } from \"react\";\nimport { Col, Row } from \"antd\";\nimport \"../../globals/globalStyle.css\";\nimport { getIdUser } from \"../../globals/globalFunctions\";\nimport { getDadosPessoa } from \"../../services/AccessServices\";\n\n\nfunction ModalVerifyInfoEstudante() {\n    let obj = getIdUser()\n    const [idUser] = useState(obj.id)\n    const [pessoa, setPessoa]: any = useState({})\n\n    useEffect(() => {\n        getDadosPessoa(idUser)\n            .then((res: any) => {\n                if (res.status === 200) {\n                    const dados = res.data.pessoa;\n                    setPessoa(dados)\n                }\n            })\n    }, [])\n\n    const getEscolaridade = (escolaridade: string) => {\n        if (escolaridade === \"ensinofundamental\") {\n            return \"Ensino Fundamental\"\n        } else if (escolaridade === \"ensinomedio\") {\n            return \"Ensino Médio\"\n        } else if (escolaridade === \"graduacao\") {\n            return \"Graduação\"\n        } else {\n            return \"Pós-Graduação\"\n        }\n    }\n\n    return (\n        <div>\n            <Row className={\"firstRowFinalModal\"}>\n                <Col xs={24} sm={24} md={24} lg={8} xl={8} className={\"colFinalModal\"}>\n                    <p className={\"labelInputField\"}>Nome: </p>\n                    <p>{pessoa.nome}</p>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={6} xl={6} className={\"colFinalModal\"}>\n                    <p className={\"labelInputField\"}>CPF:</p>\n                    <p>{pessoa.cpf}</p>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={6} xl={6} className={\"colFinalModal\"}>\n                    <p className={\"labelInputField\"}>Telefone:</p>\n                    <p>{pessoa.telefone}</p>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={4} xl={4} className={\"colFinalModal\"}>\n                    <p className={\"labelInputField\"}>Gênero:</p>\n                    <p>{pessoa.genero}</p>\n                </Col>\n            </Row>\n            <div id={\"divider\"} />\n            <Row className={\"rowsFinalModal\"}>\n                <Col xs={24} sm={24} md={24} lg={6} xl={6} className={\"colFinalModal\"}>\n                    <p className={\"labelInputField\"}>Escolaridade:</p>\n                    <p>{getEscolaridade(pessoa.escolaridade)}</p>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={3} xl={3} className={\"colFinalModal\"}>\n                    <p className={\"labelInputField\"}>Série/Período:</p>\n                    <p>{pessoa.serieperiodo}</p>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={7} xl={7} className={\"colFinalModal\"}>\n                    <p className={\"labelInputField\"}>Instituição:</p>\n                    <p>{pessoa.instituicao}</p>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={4} xl={4} className={\"colFinalModal\"}>\n                    <p className={\"labelInputField\"}>Estado da escola:</p>\n                    <p>{pessoa.ufescola}</p>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={4} xl={4} className={\"colFinalModal\"}>\n                    <p className={\"labelInputField\"}>Cidade da escola:</p>\n                    <p>{pessoa.cidadeescola}</p>\n                </Col>\n            </Row>\n            <div id={\"divider\"} />\n            <Row className={\"rowsFinalModal\"}>\n                <Col xs={24} sm={24} md={24} lg={4} xl={4} className={\"colFinalModal\"}>\n                    <p className={\"labelInputField\"}>RG:</p>\n                    <p>{pessoa.rg}</p>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={4} xl={4} className={\"colFinalModal\"}>\n                    <p className={\"labelInputField\"}>CNH:</p>\n                    <p>{pessoa.registrocnh}</p>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={4} xl={4} className={\"colFinalModal\"}>\n                    <p className={\"labelInputField\"}>Data de nascimento:</p>\n                    <p>{pessoa.datanascimento}</p>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={6} xl={6} className={\"colFinalModal\"}>\n                    <p className={\"labelInputField\"}>Nome da mãe:</p>\n                    <p>{pessoa.nomemae}</p>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={6} xl={6} className={\"colFinalModal\"}>\n                    <p className={\"labelInputField\"}>Nome do Pai:</p>\n                    <p>{pessoa.nomepai}</p>\n                </Col>\n            </Row>\n            <div id={\"divider\"} />\n            <Row className={\"rowsFinalModal\"}>\n                <Col xs={24} sm={24} md={24} lg={12} xl={12} className={\"colFinalModal\"}>\n                    <p className={\"labelInputField\"}>Matrícula:</p>\n                    <p>{pessoa.numregistro}</p>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={6} xl={6} className={\"colFinalModal\"}>\n                    <p className={\"labelInputField\"}>Turno:</p>\n                    <p>{pessoa.turno}</p>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={6} xl={6} className={\"colFinalModal\"}>\n                    <p className={\"labelInputField\"}>Ano de Conclusão:</p>\n                    <p>{pessoa.anodeconclusao}</p>\n                </Col>\n            </Row>\n            <div id={\"divider\"} />\n            <Row className={\"rowsFinalModal\"}>\n                <Col xs={24} sm={24} md={24} lg={4} xl={4} className={\"colFinalModal\"}>\n                    <p className={\"labelInputField\"}>CEP:</p>\n                    <p>{pessoa.cep}</p>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={6} xl={6} className={\"colFinalModal\"}>\n                    <p className={\"labelInputField\"}>Cidade:</p>\n                    <p>{pessoa.localidade}</p>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={2} xl={2} className={\"colFinalModal\"}>\n                    <p className={\"labelInputField\"}>Estado:</p>\n                    <p>{pessoa.uf}</p>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={6} xl={6} className={\"colFinalModal\"}>\n                    <p className={\"labelInputField\"}>Logradouro:</p>\n                    <p>{pessoa.logradouro}</p>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={4} xl={4} className={\"colFinalModal\"}>\n                    <p className={\"labelInputField\"}>Bairro:</p>\n                    <p>{pessoa.bairro}</p>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={2} xl={2} className={\"colFinalModal\"}>\n                    <p className={\"labelInputField\"}>Número:</p>\n                    <p>{pessoa.numero}</p>\n                </Col>\n            </Row>\n            <div id={\"divider\"} />\n        </div>\n    )\n}\n\nexport default ModalVerifyInfoEstudante;","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\bloqueio\\pages\\main\\Main.tsx",["192","193","194","195"],"import { useEffect, useState } from \"react\";\nimport { Row, Col, Table, Tag, Modal, Button, message, Tooltip, Card } from \"antd\";\nimport Header from \"../../../visual_components/header/Header\";\nimport ModalContent from \"../../../visual_components/modals/ModalContent\"\nimport \"./Main.css\"\nimport \"../../../globals/globalStyle.css\";\nimport { deleteSolicitacao, getSolicitacoesFromServer, updateSolicitacao } from \"../../../services/SolicitacoesService\";\nimport { DeleteFilled, EditFilled, ExclamationCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { getDateFromMoment, getOption, isLogged, logout, maskForDate } from \"../../../globals/globalFunctions\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction Main() {\n\n    let history = useHistory()\n\n    if (!isLogged()) {\n        history.replace('/')\n    }\n\n    let estudante = { id: \"\", pessoaId: \"\", nome: \"\" }\n    let estudanteLocal = localStorage.getItem(\"usuario\")\n\n    if (estudanteLocal !== null && estudanteLocal !== undefined) {\n        estudante = JSON.parse(estudanteLocal)\n    } else {\n        localStorage.setItem(\"functionLooked\", \"bloqueio\")\n        history.replace('/')\n    }\n\n    let emptyObject = { id_solicitacao: \"\", name_aluno: \"\", email: \"\", phone: \"\", cpf: \"\", school: \"\", created_at: new Date(), dateMasked: \"\", motivoTitle: \"\", motivo: \"\", situation: false }\n    const [, setObjectDataModal] = useState(emptyObject)\n    const [modal1Visible, setModal1Visible] = useState(false)\n    const [solicitacoes, setSolicitacoes] = useState([])\n\n    const [idModal, setIdModal] = useState(\"\")\n    const [nameModal, setNameModal] = useState(\"\")\n    const [emailModal, setEmailModal] = useState(\"\")\n    const [phoneModal, setPhoneModal] = useState(\"\")\n    const [cpfModal, setCPFModal] = useState(\"\")\n    const [schoolModal, setSchoolModal] = useState(\"\")\n    const [motivoModal, setMotivoModal] = useState(\"\")\n\n    useEffect(() => {\n        if (estudante === null || estudante === undefined) {\n\n            Modal.info({\n                content: \"Você deve logar primeiro!\",\n                onOk: () => {\n                    history.replace('/')\n                }\n            })\n        } else {\n            getSolicitacoesFromServer(estudante.pessoaId).then((response) => {\n                if (response === undefined) {\n                    logout()\n                    history.replace(\"/\")\n                } else {\n                    response.forEach((element: any) => {\n                        let motivoTitle = getOption(element.motivo)\n                        let newDate = getDateFromMoment(element.created_at)\n                        let newMaskedDate = maskForDate(newDate)\n                        element.created_at = newDate\n                        element.dateMasked = newMaskedDate\n                        element.motivoTitle = motivoTitle\n                    });\n\n                    setSolicitacoes(response)\n                }\n            })\n        }\n    }, [])\n\n    const goToNovaSolicitacao = () => {\n        history.push(\"/nova-solicitacao\")\n    }\n\n    const setDataInModal = (params: any) => {\n        // alert(JSON.stringify(params))\n        setObjectDataModal(params)\n\n        setIdModal(params.id_solicitacao)\n        setNameModal(params.name_aluno)\n        setEmailModal(params.email)\n        setPhoneModal(params.phone)\n        setCPFModal(params.cpf)\n        setSchoolModal(params.school)\n        setMotivoModal(params.motivo)\n\n        setModal1Visible(true)\n    }\n\n    const columns = [\n\n        {\n            title: 'Nome',\n            dataIndex: 'name_aluno',\n            key: 'name',\n            ellipsis: {\n                showTitle: false,\n            },\n            render: (name: string) => (\n                <Tooltip placement=\"topLeft\" title={name}>\n                    {name}\n                </Tooltip>\n            )\n        },\n        {\n            title: 'Email',\n            dataIndex: 'email',\n            key: 'email',\n            ellipsis: {\n                showTitle: false,\n            },\n            render: (email: string) => (\n                <Tooltip placement=\"topLeft\" title={email}>\n                    {email}\n                </Tooltip>\n            )\n        },\n        {\n            title: 'Telefone',\n            dataIndex: 'phone',\n            key: 'phone',\n            ellipsis: {\n                showTitle: false,\n            },\n            render: (phone: string) => (\n                <Tooltip placement=\"topLeft\" title={phone}>\n                    {phone}\n                </Tooltip>\n            )\n        },\n        {\n            title: 'CPF',\n            dataIndex: 'cpf',\n            key: 'cpf',\n            ellipsis: {\n                showTitle: false,\n            },\n            render: (cpf: string) => (\n                <Tooltip placement=\"topLeft\" title={cpf}>\n                    {cpf}\n                </Tooltip>\n            )\n        },\n        {\n            title: 'Escola',\n            dataIndex: 'school',\n            key: 'school',\n            ellipsis: {\n                showTitle: false,\n            },\n            render: (school: string) => (\n                <Tooltip placement=\"topLeft\" title={school}>\n                    {school}\n                </Tooltip>\n            )\n        },\n        {\n            title: 'Data',\n            dataIndex: 'dateMasked',\n            key: 'created_at',\n            ellipsis: {\n                showTitle: false,\n            },\n            render: (created_at: string) => (\n                <Tooltip placement=\"topLeft\" title={created_at}>\n                    {created_at}\n                </Tooltip>\n            )\n        },\n        {\n            title: 'Motivo',\n            dataIndex: 'motivoTitle',\n            key: 'motivo',\n            ellipsis: {\n                showTitle: false,\n            },\n            render: (motivo: string) => (\n                <Tooltip placement=\"topLeft\" title={motivo}>\n                    {motivo}\n                </Tooltip>\n            )\n            // filters: getOptionsToFilter(),\n            // filterMultiple: false,\n        },\n        {\n            title: 'Situação',\n            dataIndex: 'situation',\n            key: 'situation',\n            ellipsis: {\n                showTitle: false,\n            },\n\n            render: (situation: Boolean) => {\n                let color = situation ? 'green' : 'volcano';\n                let valueText = situation ? \"Concluído\" : \"Pendente\"\n                return (\n                    <Tag color={color} key={valueText}>\n                        {valueText}\n                    </Tag>\n                )\n            }\n        },\n        {\n            title: 'Action',\n            key: 'operation',\n            fixed: false,\n            width: 200,\n            render: (situation: Boolean, record: any) => (\n                situation ?\n                    (\n                        <div>\n                            <a><EditFilled onClick={() => setDataInModal(record)} style={{ fontSize: '24px', color: '#817f7f' }} /></a>\n                            <a><DeleteFilled onClick={() => confirm(record)} style={{ fontSize: '24px', marginLeft: '18px', color: '#ad2727' }} /></a>\n                        </div>\n                    ) : (\n                        <div />\n                    )\n            )\n        },\n    ]\n\n    function confirm(params: any) {\n        Modal.confirm({\n            title: 'Deseja excluir essa solicitação?',\n            icon: <ExclamationCircleOutlined />,\n            content: 'Essa operação não poderá ser desfeita...',\n            okText: 'Sim, excluir',\n            onOk: async () => {\n                try {\n                    let retorno = await deleteSolicitacao(params.id_solicitacao)\n                    getSolicitacoesFromServer(estudante.pessoaId).then((response) => {\n                        if (response === undefined) {\n                            logout()\n                            history.replace(\"/\")\n                        } else {\n                            response.forEach((element: any) => {\n                                let motivoTitle = getOption(element.motivo)\n                                let newDate = getDateFromMoment(element.created_at)\n                                let newMaskedDate = maskForDate(newDate)\n                                element.created_at = newDate\n                                element.dateMasked = newMaskedDate\n                                element.motivoTitle = motivoTitle\n                            });\n\n                            setSolicitacoes(response)\n                            message.success(\"Solicitação excluída com sucesso!\")\n                        }\n                    })\n                } catch (error) {\n                    message.error(error.response.data.message)\n                }\n\n\n            },\n            cancelText: 'Cancelar'\n        });\n    }\n\n    const nomeApply = (e: any) => { setNameModal(e.target.value) }\n    const emailApply = (e: any) => { setEmailModal(e.target.value) }\n    const phoneApply = (e: any) => { setPhoneModal(e.target.value) }\n    const cpfApply = (e: any) => { setCPFModal(e.target.value) }\n    const schoolApply = (e: any) => { setSchoolModal(e.target.value) }\n    const motivoApply = (value: any) => { setMotivoModal(value) }\n\n    return (\n        <div className={\"fullDiv\"}>\n            <Header />\n            <Modal\n                title={\"Solicitação de Bloqueio do Cartão\"}\n                style={{ top: 20 }}\n                visible={modal1Visible}\n                okText={\"Salvar\"}\n                cancelText={\"Cancelar\"}\n                cancelButtonProps={{\n                    danger: true\n                }}\n                onOk={async () => {\n                    try {\n                        let object = {\n                            id_solicitacao: idModal,\n                            name_aluno: nameModal,\n                            email: emailModal,\n                            phone: phoneModal,\n                            cpf: cpfModal,\n                            school: schoolModal,\n                            motivo: motivoModal\n                        }\n\n                        await updateSolicitacao(object)\n\n                        getSolicitacoesFromServer(estudante.pessoaId).then((response) => {\n                            response.forEach((element: any) => {\n                                let motivoTitle = getOption(element.motivo)\n                                let newDate = getDateFromMoment(element.created_at)\n                                let newMaskedDate = maskForDate(newDate)\n                                element.created_at = newDate\n                                element.dateMasked = newMaskedDate\n                                element.motivoTitle = motivoTitle\n                            });\n\n                            setSolicitacoes(response)\n                        })\n                        setModal1Visible(false)\n                        message.success('Solicitação atualizada com sucesso!')\n                    } catch (error) {\n                        message.error(error.response.data.message)\n                    }\n                }}\n                onCancel={() => setModal1Visible(false)}\n\n            >\n                <ModalContent\n                    nameAluno={nameModal}\n                    emailAluno={emailModal}\n                    phoneAluno={phoneModal}\n                    cpfAluno={cpfModal}\n                    schoolAluno={schoolModal}\n                    motivoAluno={motivoModal}\n                    setNomeApply={nomeApply}\n                    setEmailApply={emailApply}\n                    setPhoneApply={phoneApply}\n                    setCPFApply={cpfApply}\n                    setEscolaApply={schoolApply}\n                    setMotivoApply={motivoApply}\n                />\n            </Modal>\n            <Row>\n                <Col xs={1} sm={1} md={1} lg={2} xl={2} />\n                <Col className={\"divTitleMain\"} xs={22} sm={22} md={22} lg={20} xl={20}>\n                    <p className={\"divTitleMainP\"}>Veja abaixo suas solicitações</p>\n                    <Button id={\"btnAddSolicitacaoDesktop\"} type=\"primary\" shape={\"round\"} icon={<PlusOutlined />} size={\"middle\"} onClick={() => goToNovaSolicitacao()}>\n                        Nova Solicitação\n                    </Button>\n                </Col>\n                <Col xs={1} sm={1} md={1} lg={2} xl={2} />\n            </Row>\n            <Row>\n                <Col xs={0} sm={0} md={0} lg={2} xl={2} />\n                <Col style={{ height: \"75vh\" }} xs={0} sm={0} md={0} lg={20} xl={20}>\n                    <Table dataSource={solicitacoes} columns={columns} scroll={{ x: 1000, y: 300 }} bordered />\n                </Col>\n                <Col id={\"divSolicitacoes\"} xs={24} sm={24} md={24} lg={0} xl={0}>\n                    {\n                        solicitacoes.map((item: any) => {\n                            return (\n                                <Card\n                                    id={\"cardSolicitacao\"}\n                                    actions={[\n                                        <EditFilled onClick={() => setDataInModal(item)} />,\n                                        <DeleteFilled onClick={() => confirm(item)} style={{ color: '#ad2727' }} />,\n                                    ]}\n                                    bordered\n                                >\n                                    <div id={\"rowDataAluno\"}>\n                                        <p id={\"idNameAluno\"}>{item.motivoTitle}</p>\n                                        <p id={\"idDataSolicitacao\"}>{item.dateMasked}</p>\n                                    </div>\n                                    <div id={\"rowDataAluno\"}>\n                                        <p className={\"dataSolicitacao\"}>{item.name_aluno}</p>\n                                        <p className={\"dataSolicitacao\"}>{item.situation ? \"Concluído\" : \"Pendente\"}</p>\n                                    </div>\n                                    {/* <Meta\n                                        title={item.name_aluno}\n                                        description={item.dateMasked}\n                                    /> */}\n                                </Card>\n                            )\n                        })\n                    }\n                </Col>\n                <Col xs={0} sm={0} md={0} lg={2} xl={2} />\n            </Row>\n            <Button id={\"btnAddSolicitacaoMobile\"} type=\"primary\" shape=\"circle\" icon={<PlusOutlined />} size={\"large\"} onClick={() => goToNovaSolicitacao()} />\n\n            {/* <Footer /> */}\n        </div>\n    )\n}\n\nexport default Main;\n\n","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\bloqueio\\pages\\nova_solicitacao\\NovaSolicitacao.tsx",[],"C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\atualizacao\\pages\\cadastro\\CadastroPessoa.tsx",["196"],"import React, { useState, useEffect } from 'react';\n// eslint-disable-next-line object-curly-newline\nimport { Steps, Row, Col, message, Alert } from 'antd';\nimport 'antd/dist/antd.css';\nimport '../../../globals/globalStyle.css'\nimport './CadastroPessoa.css';\nimport Infoestudante from '../forms_cadastro/InfoEstudante';\nimport Fotoestudante from '../forms_cadastro/FotoEstudante';\nimport Documentoident from '../forms_cadastro/DocumentoIdentificacao';\nimport ComprovanteMatricula from '../forms_cadastro/ComprovanteMatricula';\nimport ComprovanteEndereco from '../forms_cadastro/ComprovanteEndereco';\nimport FotoCarteiraEstudante from '../forms_cadastro/CarteiraEstudante';\nimport Header from '../../../visual_components/header/Header';\nimport { useHistory } from 'react-router-dom';\nimport { CreditCardOutlined, FileDoneOutlined, HomeOutlined, IdcardOutlined, PictureOutlined, SolutionOutlined, UserOutlined } from '@ant-design/icons';\nimport { getStep } from '../../../services/AccessServices';\nimport { getTransacao, verificarPagamento } from '../../../services/PagamentosServices';\nimport { isLogged, logout } from '../../../globals/globalFunctions';\n\nconst { Step } = Steps;\n\n// eslint-disable-next-line no-console\n// eslint-disable-next-line react-hooks/rules-of-hooks\nexport function validarImg(error: string) {\n  if (error === 'size') {\n    message.error('Tamanho maximo de arquivo deve ser de 5MB');\n  }\n  if (error === 'format') {\n    message.error('Formato não aceito, apenas PNG e JPEG');\n  }\n}\nexport default function CadastroPessoa() {\n  let history = useHistory()\n\n  if (!isLogged()) {\n    history.replace('/')\n  }\n\n  let estudanteModel = { id: \"\", nome: \"\" }\n  let estudanteLocal = localStorage.getItem(\"usuario\")\n\n\n  if (estudanteLocal !== null && estudanteLocal !== undefined) {\n    estudanteModel = JSON.parse(estudanteLocal)\n  } else {\n    localStorage.setItem(\"functionLooked\", \"atualizacao\")\n    history.replace('/')\n  }\n\n\n  const [firstAccess, setFirstAccess] = useState(false)\n  const [current, setCurrent] = useState(1);\n  const [estado, setEstado] = useState(\"analise\");\n  const [idTransaction, setIdTransaction] = useState(\"\")\n\n  const setStep = (varEstado: string) => {\n    let isFirstAccess = false\n    let isf = localStorage.getItem(\"isf\")\n\n    getStep(estudanteModel.id).then((res: any) => {\n      if (varEstado === \"first\") {\n        localStorage.setItem(\"isFirst\", \"true\")\n      }\n\n      if (isf !== null && isf !== undefined) {\n        isFirstAccess = isf === \"true\" && res.step === 0\n        localStorage.setItem(\"isf\", \"false\")\n      }\n\n      setFirstAccess(isFirstAccess)\n\n      if (varEstado === 'recusado' || varEstado === \"first\") {\n        if (res.step < 6) {\n          setCurrent(res.step + 1)\n        } else if (res.step >= 6) {\n          setCurrent(res.step >= 6 ? 1 : res.step + 1)\n        } else {\n          setCurrent(1)\n        }\n      } else {\n        history.replace('/redirect')\n      }\n    })\n  }\n\n  useEffect(() => {\n    if (isLogged()) {\n\n      let idPix: any = localStorage.getItem(\"idPix\")\n      let varEstado = \"first\"\n\n      if (idPix === null || idPix === undefined || idPix === \"\") {\n        getTransacao(estudanteModel.id)\n          .then((res: any) => {\n            if (res !== undefined) {\n              if (res.data.__transactions__ !== 404) {\n                if (res.status === 200) {\n                  const atualizacao = res.data.__transactions__[0].requestStatus;\n                  const payment = res.data.__transactions__[0].payment.paymentStatus;\n\n                  setIdTransaction(res.data.__transactions__[0].id)\n                  // alert(JSON.stringify(atualizacao !== undefined && atualizacao !== null && payment !== undefined && payment !== null && payment!==\"paid\"))\n                  if (atualizacao !== undefined && atualizacao !== null && payment !== undefined && payment !== null) {\n                    if (payment === \"paid\") {\n                      varEstado = atualizacao\n                    } else {\n                      history.replace(\"/redirect\")\n                    }\n                  } else {\n                    history.replace(\"/redirect\")\n                    varEstado = \"first\"\n                  }\n                } else {\n                  history.replace('/redirect')\n                }\n              } else {\n                history.replace('/redirect')\n              }\n            }\n\n\n            setStep(varEstado)\n          })\n\n      } else {\n        let pixIsPaid = false\n        verificarPagamento(idPix)\n          .then((res: any) => {\n            if (res === undefined) {\n              logout()\n              history.replace(\"/\")\n            } else {\n              if (res.data.status === \"paid\") {\n                pixIsPaid = true\n                getTransacao(estudanteModel.id).then((res: any) => {\n                  if (res.data.__transactions__ !== 404) {\n                    if (res.status === 200) {\n                      const atualizacao = res.data.__transactions__[0].requestStatus;\n\n                      setIdTransaction(res.data.__transactions__[0].id)\n\n                      if (pixIsPaid) {\n                        if (atualizacao !== undefined && atualizacao !== null) {\n                          if (atualizacao === 'aprovado') {\n                            setEstado(\"aprovado\")\n                            varEstado = \"aprovado\"\n                          } else if (atualizacao === 'recusado') {\n                            setEstado(\"recusado\")\n                            varEstado = \"recusado\"\n                          } else if (atualizacao === \"first\") {\n                            setEstado(\"first\")\n                            varEstado = \"first\"\n                          } else if (res.data.paymentStatus === 'aprovado') {\n                            setEstado(\"aprovado\")\n                            varEstado = \"aprovado\"\n                          }\n                        } else {\n                          varEstado = \"first\"\n                        }\n                      } else {\n                        history.replace('/redirect')\n                      }\n                    }\n                  } else {\n                    varEstado = \"first\"\n                  }\n                });\n              } else {\n                history.replace('/redirect')\n              }\n            }\n            setStep(varEstado)\n          })\n      }\n    }\n  }, []);\n\n  const currentPlusUnum = () => {\n    setFirstAccess(false)\n    setCurrent(current + 1)\n  }\n\n  const currentMinusUnum = () => {\n    setFirstAccess(false)\n    setCurrent(current - 1)\n  }\n\n  const steps = [\n    {\n      title: 'Pagamento',\n      titleCutted: 'Pagamento',\n      icon: <CreditCardOutlined />\n    },\n    {\n      title: 'Informação do Estudante',\n      titleCutted: 'Info Estudante',\n      content: <Infoestudante goToNext={currentPlusUnum} />,\n      icon: <UserOutlined />\n    },\n    {\n      title: 'Foto do Estudante',\n      titleCutted: 'Foto Estudante',\n      content: <Fotoestudante\n        goToNext={currentPlusUnum}\n        goToPrev={currentMinusUnum}\n        idTransaction={idTransaction}\n      />,\n      icon: <PictureOutlined />\n    },\n    {\n      title: 'Documento de Identificação',\n      titleCutted: 'Identificação',\n      content: <Documentoident\n        goToNext={currentPlusUnum}\n        goToPrev={currentMinusUnum}\n        idTransaction={idTransaction}\n      />,\n      icon: <SolutionOutlined />\n    },\n    {\n      title: 'Comprovante de Matrícula',\n      titleCutted: 'Matrícula',\n      content: <ComprovanteMatricula\n        goToNext={currentPlusUnum}\n        goToPrev={currentMinusUnum}\n        idTransaction={idTransaction}\n      />,\n      icon: <FileDoneOutlined />\n    },\n    {\n      title: 'Documento de Endereço',\n      titleCutted: 'Endereço',\n      content: <ComprovanteEndereco\n        goToNext={currentPlusUnum}\n        goToPrev={currentMinusUnum}\n        idTransaction={idTransaction}\n      />,\n      icon: <HomeOutlined />\n    },\n    {\n      title: 'Carteira atual',\n      titleCutted: 'Carteira atual',\n      content: <FotoCarteiraEstudante\n        goToPrev={currentMinusUnum}\n        idTransaction={idTransaction}\n      />,\n      icon: <IdcardOutlined />\n    },\n  ];\n\n  const onChangeTab = (current: number) => {\n    if (current !== 0 && estado === 'recusado') {\n      setCurrent(current)\n    }\n  };\n\n  const messageTopo = \"Parabéns!\"\n  const subMessageTopo = \"Seu pagamento foi realizado com sucesso! Informe os seus dados  para dar continuidade no seu pedido de ATUALIZAÇÃO CADASTRAL...\"\n\n  return (\n    <div className={\"fullDiv\"}>\n      <Header />\n\n      <Row className={\"divDados\"}>\n        <Col xs={1} sm={1} md={1} lg={1} xl={2} />\n        <Col xs={22} sm={22} md={22} lg={22} xl={20} className={\"paddingT16\"}>\n          <Row className={\"divSteps divWithBoxShadow\"}>\n            <Col span={0} lg={24} xl={24}>\n              <Steps current={current} size={\"small\"} onChange={onChangeTab}>\n                {steps.map((item: any) => (\n                  <Step\n                    key={item.title}\n                    title={item.titleCutted}\n                    icon={item.icon}\n                  />\n                ))}\n              </Steps>\n            </Col>\n\n            <Col span={24} lg={0} xl={0}>\n              <Steps current={current} size={\"small\"} onChange={onChangeTab}>\n                {steps.map((item: any) => (\n                  <Step\n                    key={item.title}\n                    icon={item.icon}\n                  />\n                ))}\n              </Steps>\n            </Col>\n          </Row>\n\n          {\n            firstAccess ? (\n              <Alert style={{ marginTop: \"16px\", marginBottom: \"16px\" }} type={\"success\"} showIcon closable message={messageTopo} description={subMessageTopo} />\n            ) : (\n                <div />\n              )\n          }\n\n          <Row className={\"cardFormAtualizacao\"}>\n            <Col span={24}>\n              <p className={\"divTitleMainP\"}>{steps[current].title}</p>\n              <div>{steps[current].content}</div>\n            </Col>\n          </Row>\n        </Col>\n        <Col xs={1} sm={1} md={1} lg={1} xl={2} />\n\n      </Row>\n      {/* <Footer /> */}\n    </div>\n  );\n}","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\primeiraVia\\pages\\cadastro\\CadastroPessoa.tsx",["197"],"C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\atualizacao\\pages\\home\\Home.tsx",["198"],"import React, { useEffect, useState } from 'react';\n// eslint-disable-next-line object-curly-newline\nimport { Steps, Row, Col, Card, Button } from 'antd';\nimport 'antd/dist/antd.css';\nimport './Home.css'\nimport '../../../globals/globalStyle.css';\nimport Header from '../../../visual_components/header/Header';\nimport { getIdUser, isLogged, logout } from '../../../globals/globalFunctions';\nimport { getDocuments, getPessoa } from '../../../services/AccessServices';\nimport { useHistory } from 'react-router-dom';\nimport { getTransacao } from '../../../services/PagamentosServices';\nimport { CheckCircleOutlined, ClockCircleOutlined, CloseCircleOutlined, DownOutlined, LeftOutlined, SmileOutlined, UpOutlined } from '@ant-design/icons';\n\nimport successImage from '../../../images/img_success.png'\nimport failureImage from '../../../images/img_failure.png'\nimport analiseImage from '../../../images/img_analise.png'\n\nconst STATUS_REC = \"recusado\"\nconst STATUS_ANA = \"analise\"\nconst STATUS_APR = \"aprovado\"\n\nconst { Step } = Steps;\nexport default function Home() {\n  let history = useHistory()\n\n  if (!isLogged()) {\n    history.replace('/')\n  }\n\n  let obj = getIdUser()\n  const [idUser] = useState(obj.id)\n\n  const [nome, setNome] = useState(\"\")\n  const [email, setEmail] = useState(\"\")\n  const [instituicao, setInstituicao] = useState(\"\")\n  const [isRG, setIsRG] = useState(false)\n  const [rg, setRG] = useState(\"\")\n  const [cnh, setCNH] = useState(\"\")\n  const [dataNascimento, setDataNascimento] = useState(\"\")\n  const [periodo, setPeriodo] = useState(\"\")\n  const [nomePai, setNomePai] = useState(\"\")\n  const [nomeMae, setNomeMae] = useState(\"\")\n\n  const [errosShowed, setErrosShowed] = useState(false)\n  const [erros, setErros] = useState<string[]>([])\n\n  const [status, setStatus] = useState(STATUS_ANA)\n\n  useEffect(() => {\n    if (isLogged()) {\n      getPessoa(idUser).then((res: any) => {\n        if (res === undefined) {\n          logout()\n          history.replace(\"/\")\n        } else {\n          setNome(res.pessoa.nome)\n          setEmail(res.email)\n          setInstituicao(res.pessoa.instituicao)\n\n          setDataNascimento(res.pessoa.datanascimento)\n          setPeriodo(res.pessoa.serieperiodo)\n          setNomePai(res.pessoa.nomepai)\n          setNomeMae(res.pessoa.nomemae)\n\n          setIsRG(res.pessoa.tipodocumento === \"rg\")\n          if (res.pessoa.tipodocumento === \"rg\") {\n            setRG(res.pessoa.rg)\n          } else {\n            setCNH(res.pessoa.registrocnh)\n          }\n        }\n      })\n\n      getDocuments(idUser).then((res: any) => {\n        if (res === undefined) {\n          logout()\n          history.replace(\"/\")\n        } else {\n          if (res.status === 200) {\n            let response = res.data.result\n\n            let list: string[] = []\n            if (response.identidadeverso_criticalmessage !== null) { list.push(\"Verso da identidade: \" + response.identidadeverso_criticalmessage) }\n            if (response.identidadefrente_criticalmessage !== null) { list.push(\"Frente da identidade: \" + response.identidadefrente_criticalmessage) }\n            if (response.fotoestudante_criticalmessage !== null) { list.push(\"Foto do estudante: \" + response.fotoestudante_criticalmessage) }\n            if (response.comprovantematricula_criticalmessage !== null) { list.push(\"Comprovante de matrícula: \" + response.comprovantematricula_criticalmessage) }\n            if (response.comprovanteendereco_criticalmessage !== null) { list.push(\"Comprovante de endereço: \" + response.comprovanteendereco_criticalmessage) }\n            if (response.doccarteiaatual_criticalmessage !== null) { list.push(\"Carteira atual: \" + response.doccarteiaatual_criticalmessage) }\n\n            setErros(list)\n          }\n        }\n      })\n\n      getTransacao(idUser).then((res: any) => {\n        if (res === undefined) {\n          logout()\n          history.replace(\"/\")\n        } else {\n          if (res.status === 200) {\n            if (res.data.__transactions__ !== 404) {\n              const atualizacao = res.data.__transactions__[0].requestStatus;\n              const pagamento = res.data.__transactions__[0].payment.paymentStatus;\n              if (pagamento === null) {\n                history.replace('/pagamento')\n              } else if (atualizacao === null) {\n                history.replace('/atualizacao-cadastral')\n              } else {\n                if (res.status === 200) {\n                  if (atualizacao === 'aprovado' &&\n                    pagamento === 'paid'\n                  ) {\n                    setStatus(STATUS_APR)\n                  } else if (atualizacao === 'recusado') {\n                    setStatus(STATUS_REC)\n                    // setErrosShowed(true)\n                  } else if (res.data.paymentStatus === 'aprovado') {\n                    setStatus(STATUS_APR)\n                  } else if (atualizacao === 'analise' || atualizacao === 'revisado') {\n                    setStatus(STATUS_ANA)\n                  } else {\n                    history.replace('/atualizacao-cadastral')\n                  }\n                }\n              }\n            } else {\n              history.replace('/pagamento')\n            }\n          }\n        }\n      });\n\n    }\n  }, [])\n\n  const getDataMessage = () => {\n    if (status === STATUS_APR) {\n      return {\n        title: \"Parabéns!\",\n        subtitle: \"\",\n        imageSrc: successImage,\n        message: \"Sua ATUALIZAÇÃO CADASTRAL foi realizada com sucesso.\",\n        submessage: \"Faça sua atualização semestralmente e evite o bloqueio do seu cartão estudantil.\"\n      }\n    } else if (status === STATUS_REC) {\n      return {\n        title: \"Atenção!\",\n        subtitle: \"Caro estudante, existe alguma divergência no seu pedido de atualização cadastral.\",\n        imageSrc: failureImage,\n        message: \"Acesse seus dados e verifique seu pedido.\",\n        submessage: \"\"\n      }\n    } else {\n      return {\n        title: \"Parabéns!\",\n        subtitle: \"Sua solicitação foi concluída com sucesso!\",\n        imageSrc: analiseImage,\n        message: \"Seus dados cadastrais serão analisados, e em até 5 (cinco) dias úteis serão concluídos.\",\n        submessage: \"Nós enviaremos um e-mail confirmando sua atualização cadastral. Se preferir, acompanhe através do sistema utilizando seu login e senha.\"\n      }\n    }\n  }\n\n  const getStatusCard = () => {\n    if (status === STATUS_APR) {\n      return (\n        <Col span={24}>\n          <Row className={\"statusAtualizacao\"}>\n            <Col span={0} md={24} lg={24} xl={24} >\n              <Steps current={2}>\n                <Step title=\"Cadastro\" icon={<CheckCircleOutlined />} />\n                <Step title=\"Análise\" icon={<ClockCircleOutlined />} />\n                <Step title=\"Concluído\" icon={<SmileOutlined />} />\n              </Steps>\n            </Col>\n            <Col span={24} md={0} lg={0} xl={0} >\n              <Steps current={2}>\n                <Step title=\"Cad...\" icon={<CheckCircleOutlined />} />\n                <Step title=\"Aná...\" icon={<ClockCircleOutlined />} />\n                <Step title=\"Con...\" icon={<SmileOutlined />} />\n              </Steps>\n            </Col>\n          </Row>\n        </Col>\n      )\n    } else if (status === STATUS_REC) {\n      return (\n        <Col span={24}>\n          <Row className={\"statusAtualizacao\"}>\n            <Col span={0} md={24} lg={24} xl={24} >\n              <Steps current={1} status=\"error\">\n                <Step title=\"Cadastro\" icon={<CheckCircleOutlined />} />\n                <Step title=\"Análise\" icon={<CloseCircleOutlined />} />\n                <Step title=\"Concluído\" status={\"wait\"} icon={<SmileOutlined />} />\n              </Steps>\n            </Col>\n            <Col span={24} md={0} lg={0} xl={0} >\n              <Steps current={1} status=\"error\">\n                <Step title=\"Cad...\" icon={<CheckCircleOutlined />} />\n                <Step title=\"Aná...\" icon={<CloseCircleOutlined />} />\n                <Step title=\"Con...\" status={\"wait\"} icon={<SmileOutlined />} />\n              </Steps>\n            </Col>\n          </Row>\n        </Col>\n      )\n    } else {\n      return (\n        <Col span={24}>\n          <Row className={\"statusAtualizacao\"}>\n            <Col span={0} md={24} lg={24} xl={24} >\n              <Steps current={1}>\n                <Step title=\"Cadastro\" icon={<CheckCircleOutlined />} />\n                <Step title=\"Análise\" icon={<ClockCircleOutlined />} />\n                <Step title=\"Concluído\" status={\"wait\"} icon={<SmileOutlined />} />\n              </Steps>\n            </Col>\n            <Col span={24} md={0} lg={0} xl={0} >\n              <Steps current={1} className={\"stepsSmall\"}>\n                <Step title=\"Cad...\" icon={<CheckCircleOutlined />} />\n                <Step title=\"Aná...\" icon={<ClockCircleOutlined />} />\n                <Step title=\"Con...\" status={\"wait\"} icon={<SmileOutlined />} />\n              </Steps>\n            </Col>\n          </Row>\n        </Col>\n      )\n    }\n  }\n\n  const getColorText = () => {\n    if (status === STATUS_APR) {\n      return \"#76a109\"\n    } else if (status === STATUS_REC) {\n      return \"#c03131\"\n    } else {\n      return \"#808080\"\n    }\n  }\n\n  return (\n    <div className={\"fullDiv\"}>\n      <Header />\n      <Row>\n        <Col xs={0} sm={0} md={0} lg={3} xl={3} />\n\n        <Col xs={1} sm={1} md={1} lg={0} xl={0} />\n        <Col xs={22} sm={22} md={22} lg={18} xl={18} className={\"divDados\"}>\n          <br />\n\n          <div className={\"cardBackHome\"}>\n            {getStatusCard()}\n          </ div>\n          <br />\n          <div className={\"cardBackHome\"}>\n            <div id={\"divMessageSuccess\"}>\n              <h3 id={\"h3Message\"} style={{ color: getColorText() }}>{getDataMessage().title}</h3>\n              <p id={\"pMessage\"}>{getDataMessage().subtitle}</p>\n              <img id={\"imgMessage\"} src={getDataMessage().imageSrc} alt={\"aaa\"} />\n              <p id={\"pMessage\"}>{getDataMessage().message}</p>\n              <p id={\"pSubMessage\"}>{getDataMessage().submessage}</p>\n              {\n                status === STATUS_REC ? (\n                  <Button id={\"buttonReprovado\"} type={\"primary\"} onClick={() => setErrosShowed(!errosShowed) /*history.replace(\"/atualizacao-cadastral\")*/}>\n                    <p id={\"textButtonReprovado\"}>Ver os erros {errosShowed ? <UpOutlined /> : <DownOutlined />}</p>\n                  </Button>\n                ) : (\n                    <div />\n                  )\n              }\n              {errosShowed ?\n                (\n                  <div id={\"divErrors\"}>\n                    <p className={\"subTitleMainP\"} style={{ color: \"#c03131\" }}>Esses foram os erros encontrados:</p>\n                    <br />\n                    <ul>\n                      {erros.map((it) => {\n                        return <li style={{ margin: \"0\" }}>{it}</li>\n                      })}\n                    </ul>\n                    <br />\n                    <Button type={\"dashed\"} onClick={() => history.replace(\"/atualizacao-cadastral\")}>\n                      <LeftOutlined /> Voltar para a atualização\n                    </Button>\n                  </div>\n                ) : (\n                  <div />\n                )\n              }\n\n            </div>\n          </ div>\n          <br />\n          <Card id={\"cardHome\"}>\n            <p className={\"subTitleMainP\"}>Veja abaixo, algumas de suas informações</p>\n            <br />\n            <Row id={\"rowCardHome\"}>\n              <Col xs={24} sm={24} md={24} lg={12} xl={12}>\n                <p className={\"subTitleMainP\"}><b>Nome:</b> {nome}</p>\n              </Col>\n              <br />\n              <Col xs={24} sm={24} md={24} lg={12} xl={12}>\n                <p className={\"subTitleMainP\"}><b>E-mail: {email}</b></p>\n              </Col>\n              <Col xs={24} sm={24} md={24} lg={12} xl={12}>\n                <p className={\"subTitleMainP\"}><b>Instituição:</b> {instituicao}</p>\n              </Col>\n              <Col xs={24} sm={24} md={24} lg={12} xl={12}>\n                <p className={\"subTitleMainP\"}><b>{isRG ? \"RG:\" : \"CNH:\"}</b> {isRG ? rg : cnh}</p>\n              </Col>\n              <Col xs={24} sm={24} md={24} lg={12} xl={12}>\n                <p className={\"subTitleMainP\"}><b>Data de Nascimento:</b>{dataNascimento}</p>\n              </Col>\n              <Col xs={24} sm={24} md={24} lg={12} xl={12}>\n                <p className={\"subTitleMainP\"}><b>Série/Período:</b> {periodo}</p>\n              </Col>\n              <Col xs={24} sm={24} md={24} lg={12} xl={12}>\n                <p className={\"subTitleMainP\"}><b>Nome da Mãe:</b> {nomeMae}</p>\n              </Col>\n              <Col xs={24} sm={24} md={24} lg={12} xl={12}>\n                <p className={\"subTitleMainP\"}><b>Nome do Pai:</b> {nomePai}</p>\n              </Col>\n              <br />\n              <br />\n              <br />\n              <Col xs={0} sm={0} md={0} lg={9} xl={9} />\n              <Col xs={0} sm={0} md={0} lg={9} xl={9} />\n            </Row>\n          </Card>\n          {/* </div> */}\n          <br />\n        </Col>\n        <Col xs={1} sm={1} md={1} lg={3} xl={3} />\n      </Row>\n      {/* <Footer /> */}\n    </div >\n  );\n}\n","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\atualizacao\\pages\\forms_cadastro\\InfoEstudante.tsx",["199"],"// /* eslint-disable prettier/prettier */\n// /* eslint-disable quotes */\nimport React, {\n  useState, useEffect,\n} from 'react';\n// eslint-disable-next-line object-curly-newline\nimport { Skeleton, Form, Input, Col, Row, Select, message, Button } from 'antd';\nimport { cpf } from 'cpf-cnpj-validator';\nimport MaskedInput from 'antd-mask-input';\nimport 'antd/dist/antd.css';\nimport '../../../globals/globalStyle.css'\nimport { getIdUser, isLogged, logout } from '../../../globals/globalFunctions';\nimport { VerticalLeftOutlined } from '@ant-design/icons';\nimport { getDadosPessoa, getInstituicoes, setCadastroPessoa } from '../../../services/AccessServices';\nimport { useHistory } from 'react-router-dom';\n\nconst { Option } = Select;\n\nexport default function Infoestudante(props: any) {\n  let obj = getIdUser()\n  let history = useHistory()\n\n  const [idUser] = useState(obj.id)\n\n  const [cpfvalid, setCpfvalid] = useState(0)\n  const [optionselect, setSelectEscolaridade] = useState('ensinofundamental');\n  const [valuesoptions, setValuesIntituicao] = useState([])\n  const [loading, setLoading] = useState(false);\n  const [loadingSkeleton, setLoadingSkeleton] = useState(true)\n  const [cidade, setCidade] = useState('');\n\n  let tipo = \"\";\n\n  const [form] = Form.useForm();\n  useEffect(() => {\n    if (isLogged()) {\n      getDadosPessoa(idUser)\n        .then((res: any) => {\n          if (res === undefined) {\n            logout()\n            history.replace(\"/\")\n          } else {\n            if (res.status === 200) {\n              // res.data.pessoa.genero = res.data.pessoa.genero === null ? \"masculino\" : res.data.pessoa.genero\n              setSelectEscolaridade(res.data.pessoa.escolaridade)\n\n              if (res.data.pessoa.ufescola === null) {\n                setCidade(\"\")\n              } else {\n                setCidade(getNomeCidade(res.data.pessoa.ufescola))\n              }\n\n              form.setFieldsValue(res.data.pessoa);\n              setCpfvalid(1);\n            }\n          }\n          setLoadingSkeleton(false)\n        })\n        .catch(() => {\n          message.error(\n            '1 - Não foi possivel salvar seus dados, caso o erro persista, fale conosco',\n          );\n          setLoadingSkeleton(false)\n        });\n    }\n  }, []);\n\n  const validarcpf = (values: any) => {\n    if (cpf.isValid(values.target.value) === false) {\n      setCpfvalid(0);\n      message.error('CPF invalido');\n    } else {\n      setCpfvalid(1);\n    }\n  };\n\n  const buscarinstituicao = (values: any) => {\n    if (optionselect === \"ensinomedio\" || optionselect === \"ensinofundamental\") {\n      tipo = \"escola\";\n    } else if (optionselect === \"graduacao\" || optionselect === \"posgraduacao\") {\n      tipo = \"faculdade\";\n    }\n    if (values.length >= 4) {\n      getInstituicoes(tipo, values)\n        .then((res: any) => {\n          // if (res === undefined) {\n          //   logout()\n          //   history.replace(\"/\")\n          // } else {\n          setValuesIntituicao(res.data);\n          // }\n        })\n        .catch((error: any) => {\n          message.error(\n            '1 - Não foi possivel salvar seus dados, caso o erro persista, fale conosco',\n          );\n        });\n    }\n  };\n\n  const onFinish = (values: any) => {\n    setLoading(true)\n    if (cpfvalid === 1) {\n      values.cidadeescola = cidade === \"TE\" ? \"Teresina\" : \"Timon\"\n      setCadastroPessoa(idUser, values)\n        .then((res: any) => {\n          if (res === undefined) {\n            logout()\n            history.replace(\"/\")\n          } else {\n            if (res.status === 200) {\n              message.success('Dados salvo com sucesso');\n            } else {\n              message.error(\n                '1 - Não foi possivel salvar seus dados, caso o erro persista, fale conosco',\n              );\n            }\n          }\n        })\n        .catch((error: any) => {\n          message.error(\n            '1 - Não foi possivel salvar seus dados, caso o erro persista, fale conosco',\n          );\n        });\n      setLoading(false)\n      props.goToNext()\n    } else {\n      message.error('CPF invalido');\n      setLoading(false)\n    }\n  };\n\n  const onFinishFailed = () => {\n    message.error('Não foi possivel salvar seus dados');\n    setLoading(false)\n  };\n\n  const validateMessages = {\n    required: 'Esse campo é obrigatorio',\n    types: {\n      email: 'Esse email não é valido',\n    },\n  };\n\n  const applyOptionSelect = (value: any) => {\n    if (optionselect !== value) {\n      form.setFieldsValue({\n        instituicao: undefined\n      })\n    }\n    setSelectEscolaridade(value)\n  }\n\n  const getNomeCidade = (estado: string) => {\n    if (estado === \"PI\") {\n      return \"TE\"\n    } else if (estado === \"MA\") {\n      return \"TI\"\n    } else {\n      return \"\"\n    }\n  }\n\n  return (\n    <div>\n      <Skeleton loading={loadingSkeleton} active>\n        <Row>\n          <Col xs={24} sm={24} md={24} lg={24} xl={24}>\n            <Form\n              form={form}\n              validateMessages={validateMessages}\n              // eslint-disable-next-line react/jsx-props-no-spreading\n              initialValues={{ remember: true }}\n              onFinish={onFinish}\n              onFinishFailed={onFinishFailed}\n            >\n              <Row>\n                <Col xs={24} sm={24} md={24} lg={14} xl={14}>\n                  <p className={\"labelInputField\"}>* Nome:</p>\n                  <Form.Item\n                    name=\"nome\"\n                    rules={[{ required: true, message: 'Insira seu nome!' }]}\n                  >\n                    <Input className={\"inputText\"} />\n                  </Form.Item>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={10} xl={10}>\n                  <p className={\"labelInputField\"}>* CPF:</p>\n                  <Form.Item\n                    hasFeedback\n                    validateStatus={cpfvalid === 1 ? 'success' : 'error'}\n                    name=\"cpf\"\n                    rules={[{ required: true, message: 'Insira seu CPF' }]}\n                  >\n                    <MaskedInput className={\"inputText\"} mask=\"111.111.111-11\" onBlur={validarcpf} />\n                  </Form.Item>\n                </Col>\n              </Row>\n              <Row>\n                <Col xs={24} sm={24} md={24} lg={10} xl={10}>\n                  <p className={\"labelInputField\"}>*Telefone:</p>\n                  <Form.Item\n                    name=\"telefone\"\n                    rules={[{ required: true, message: 'Insira seu Telefone' }]}\n                  >\n                    <MaskedInput className={\"inputText\"} mask=\"(11) 1 1111-1111\" />\n                  </Form.Item>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={7} xl={7}>\n                  <p className={\"labelInputField\"}>* Gênero:</p>\n                  <Form.Item\n                    name=\"genero\"\n                    initialValue={\"masculino\"}\n\n                    className={\"inputText\"}\n                    rules={[\n                      {\n                        required: true,\n                        message: 'Escolha seu gênero',\n                      },\n                    ]}\n                  >\n                    <Select\n                      placeholder={\"Escolha seu gênero\"}\n                      defaultValue={\"masculino\"}\n                      className={\"formItemSelector\"}\n                      bordered={false}\n                    >\n                      <Option value=\"masculino\">Masculino</Option>\n                      <Option value=\"feminino\">Feminino</Option>\n                      {/* <Option value=\"outro\">Outro</Option> */}\n                    </Select>\n                  </Form.Item>\n\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={7} xl={7}>\n                  <p className={\"labelInputField\"}>* Escolaridade:</p>\n                  <Form.Item\n                    name=\"escolaridade\"\n                    className={\"inputText\"}\n                    rules={[{ required: true }]}\n                  >\n                    <Select defaultValue={\"ensinofundamental\"} className={\"formItemSelector\"} onChange={applyOptionSelect} placeholder=\"Selecione\" bordered={false}>\n                      <Option value=\"ensinofundamental\">Ensino Fundamental</Option>\n                      <Option value=\"ensinomedio\">Ensino Médio</Option>\n                      <Option value=\"graduacao\">Graduação</Option>\n                      <Option value=\"posgraduacao\">Pós-Graduação</Option>\n                    </Select>\n                  </Form.Item>\n                </Col>\n              </Row>\n              <Row>\n                <Col xs={24} sm={24} md={24} lg={4} xl={4}>\n                  <p className={\"labelInputField\"}>* Série/Período:</p>\n                  <Form.Item\n                    name=\"serieperiodo\"\n                    rules={[{ required: true, message: 'Insira sua Série ou Período' }]}\n                  >\n                    <Input className={\"inputText\"} maxLength={2} type={\"number\"} />\n                  </Form.Item>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={4} xl={4}>\n                  <p className={\"labelInputField\"}>* Turno:</p>\n                  <Form.Item name=\"turno\" rules={[{ required: true }]}>\n                    <Select\n                      className={\"formItemSelector\"}\n                      placeholder=\"Selecione\"\n                      allowClear\n                      bordered={false}\n                    >\n                      <Option value=\"manha\">Manhã</Option>\n                      <Option value=\"tarde\">Tarde</Option>\n                      <Option value=\"noite\">Noite</Option>\n                      <Option value=\"manhatarde\">Manhã/Tarde</Option>\n                      <Option value=\"manhanoite\">Manhã/Noite</Option>\n                      <Option value=\"manhatardenoite\">Manhã/Tarde/Noite</Option>\n                    </Select>\n                  </Form.Item>\n\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={8} xl={8}>\n                  <p className={\"labelInputField\"}>* Instituição:</p>\n                  <Form.Item\n                    name=\"instituicao\"\n                    rules={[{ required: true }]}\n                  >\n                    <Select\n                      disabled={optionselect !== \"null\" ? false : true}\n                      onSearch={buscarinstituicao}\n                      showSearch\n                      placeholder=\"Digite o nome da instituição\"\n                      filterOption={false}\n                      className={\"formItemSelector\"}\n                      bordered={false}\n                    >\n                      {valuesoptions.map((d: any) => (\n                        <Option value={d.name} key={d.name}>{d.name}</Option>\n                      ))}\n                    </Select>\n                  </Form.Item>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={4} xl={4}>\n                  <p className={\"labelInputField\"}>* Estado da escola:</p>\n                  <Form.Item\n                    name=\"ufescola\"\n                    rules={[{ required: true, message: 'Preencha esse campo' }]}\n                  >\n                    <Select defaultValue={\"PI\"} onChange={(e: any) => { setCidade(getNomeCidade(e)) }} className={\"formItemSelector\"} placeholder=\"Selecione o estado\" bordered={false}>\n                      <Option value=\"PI\">Piauí</Option>\n                      <Option value=\"MA\">Maranhão</Option>\n                    </Select>\n                  </Form.Item>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={4} xl={4}>\n                  <p className={\"labelInputField\"}>* Cidade da escola:</p>\n                  <Select value={cidade} onChange={() => { }} className={\"formItemSelector\"} id={\"selectCity\"} placeholder=\"Selecione o estado\" bordered={false}>\n                    <Option value=\"TE\">Teresina</Option>\n                    <Option value=\"TI\">Timon</Option>\n                  </Select>\n                </Col>\n              </Row>\n              <Row>\n                <Col xs={12} sm={12} md={12} lg={19} xl={19} />\n                <Col className={\"divButtonNext\"} xs={12} sm={12} md={12} lg={5} xl={5}>\n                  <Form.Item>\n                    <Button\n                      id={\"buttonNext\"}\n                      icon={<VerticalLeftOutlined />}\n                      loading={loading}\n                      type=\"primary\"\n                      htmlType=\"submit\"\n                    // onClick={props.goToNext}\n                    >\n                      Salvar e continuar\n                  </Button>\n                  </Form.Item>\n                </Col>\n              </Row>\n            </Form>\n          </Col>\n        </Row>\n      </Skeleton>\n    </div >\n  );\n}\n","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\atualizacao\\pages\\forms_cadastro\\FotoEstudante.tsx",["200","201"],"import React, { useEffect, useState } from 'react';\n// eslint-disable-next-line object-curly-newline\nimport { Form, Image, Row, Col, Button, Upload, Skeleton, message } from 'antd';\nimport Fotoexemplo from '../../../images/fotoexemplo.jpg';\nimport { validarImg } from '../cadastro/CadastroPessoa';\nimport { getIdUser, logout, getBase64 } from '../../../globals/globalFunctions';\nimport { UploadOutlined, VerticalLeftOutlined, VerticalRightOutlined } from '@ant-design/icons';\nimport { getDocumentPicture, getDocuments, setFotoEstudante } from '../../../services/AccessServices';\nimport { useHistory } from 'react-router-dom';\nimport Modal from 'antd/lib/modal/Modal';\n\nexport default function Fotoestudante(props: any) {\n  const form = new FormData();\n  const [form1] = Form.useForm();\n\n  let obj = getIdUser()\n  let history = useHistory()\n\n  const [idUser] = useState(obj.id)\n  const [imageupload, setImageUploadvalid] = useState(false);\n  const [imagedata, setimagedata] = useState({});\n  const [imageaproved, setimagearpoved] = useState('error');\n  const [errorPic, setErrorPic] = useState(false);\n  const [previewVisible, setPreviewVisible] = useState(false);\n  const [previewImage, setPreviewImage] = useState('');\n  const [previewTitle, setPreviewTitle] = useState('');\n  const [loadingSkeleton, setLoadingSkeleton] = useState(true)\n  const [loading, setLoading] = useState(false);\n  const [loadingback, setLoadingback] = useState(false)\n\n  const [fileList, setFileList] = useState<any[]>([])\n\n  useEffect(() => {\n    getDocuments(idUser)\n      .then((res: any) => {\n        let docFotoEstudante = res.data.result.docfotoestudante\n\n        if (docFotoEstudante !== null) {\n          getDocumentPicture(idUser, docFotoEstudante)\n            .then((res: any) => {\n              if (res.data.statusCode === undefined) {\n                let image = {\n                  uid: '-2',\n                  name: 'image.jpg',\n                  status: 'done',\n                  url: res.data.url,\n                  type: \"image/jpeg\"\n                }\n\n                setFileList([image])\n                setImageUploadvalid(true)\n                setimagearpoved('done')\n              }\n              setLoadingSkeleton(false)\n            })\n            .catch((error: any) => {\n              setLoadingSkeleton(false)\n            })\n        } else {\n          setLoadingSkeleton(false)\n        }\n      })\n      .catch((error: any) => {\n        alert(JSON.stringify(error))\n        setLoadingSkeleton(false)\n      })\n  }, [])\n\n  const normFile = (e: any) => {\n    if (e.file.status !== 'removed') {\n      setImageUploadvalid(true);\n      if (e.file.type === 'image/png' || e.file.type === 'image/jpeg') {\n        if (e.file.size / 1024 / 1024 > 5) {\n          // erro de tamanho\n          validarImg('size');\n          setimagearpoved('size');\n          e.fileList[0].status = 'error';\n        } else {\n          form.append('fotoestudante', e.fileList[0].originFileObj);\n          setimagedata(form);\n          setimagearpoved('done');\n        }\n      } else if (e.file.type !== 'image/png' || e.file.type !== 'image/jpeg') {\n        // erro de formato\n        validarImg('format');\n        setimagearpoved('format');\n        e.fileList[0].status = 'error';\n      }\n    } else if (e.file.status === 'removed') {\n      setImageUploadvalid(false);\n      setimagearpoved('error');\n    }\n  };\n\n  const onFinish = () => {\n    if (imageaproved === 'done') {\n      setFotoEstudante(idUser, imagedata, props.idTransaction)\n        .then((res: any) => {\n          if (res === undefined) {\n            logout()\n            history.replace(\"/\")\n          } else {\n            if (res.status === 200) {\n              message.success('Dados salvo com sucesso');\n            } else {\n              message.error('Não foi possivel salvar seu documento');\n            }\n            setLoading(false)\n            setLoadingback(false)\n          }\n        })\n        .catch(() => {\n          message.error(\n            'Não foi possivel salvar seus dados, caso o erro persista, fale conosco',\n          );\n          setLoading(false)\n          setLoadingback(false)\n        });\n\n      if (loadingback) {\n        props.goToPrev()\n      } else {\n        props.goToNext()\n      }\n    } else {\n      if (!imageupload) {\n        message.error(\"Por favor, envie a foto...\")\n        setErrorPic(true)\n        setLoading(false)\n        setLoadingback(false)\n      }\n      validarImg(imageaproved);\n    }\n  };\n\n  const uploadButton = (\n    <Button icon={<UploadOutlined />}>Selecionar a foto</Button>\n  )\n\n  const handleChange = (e: any) => {\n    try {\n      setFileList(e.fileList)\n    } catch (error) {\n    }\n  }\n\n  const handlePreview = async (file: any) => {\n    if (!file.url && !file.preview) {\n      file.preview = await getBase64(file.originFileObj);\n    }\n\n    setPreviewImage(file.url || file.preview)\n    setPreviewVisible(true)\n    setPreviewTitle(file.name || file.url.substring(file.url.lastIndexOf('/') + 1))\n  }\n\n  return (\n    <div>\n      <Skeleton loading={loadingSkeleton} active>\n        <Row>\n          <Modal\n            visible={previewVisible}\n            title={previewTitle}\n            footer={null}\n            onCancel={() => setPreviewVisible(false)}\n          >\n            <Image alt=\"example\" style={{ width: '100%' }} src={previewImage} />\n          </Modal>\n\n          <Col xs={24} sm={24} md={24} lg={12} xl={12}>\n            <p className={\"subTitleMainP\"}>Para continuar a solicitação é necessário enviar uma foto.</p>\n            <p id={\"textHowPictureHasToBe\"}>\n              Capriche na foto, mas antes confira se ela atende as regras\n            exigidas. <br />Caso a foto não atenda as regras, será negada e você será\n            avisado(a) para fazer uploade de uma nova foto.\n          </p>\n            <Image src={Fotoexemplo} alt=\"\" />\n          </Col>\n          <Col xs={0} sm={0} md={0} lg={2} xl={2} />\n          <Col xs={24} sm={24} md={24} lg={10} xl={10} className={\"divLoadPicture\"}>\n            <p className={\"titleUploadArea\"}>Carregar Foto do Estudante</p>\n            <p className={\"subTitleMainPJustified\"}>Selecione uma foto sua recente e com uma boa qualidade, pois ela será a foto que irá constar no seu cadastro do Sistema de Bilhetagem. Seu rosto deverá estar em primeiro plano, por isso, não esqueça de ajustar bem sua foto.</p>\n            <br />\n            <Form\n              // eslint-disable-next-line react/jsx-props-no-spreading\n              form={form1}\n              name=\"enviofotoestudante\"\n              initialValues={{ remember: true }}\n              onFinish={onFinish}\n            >\n              <div id=\"botaocadpessoa\">\n                <Form.Item\n                  // valuePropName=\"fileList\"\n                  getValueFromEvent={normFile}\n                  name=\"fotoestudante\"\n                  status=\"error\"\n                >\n\n                  <Upload\n                    listType=\"picture\"\n                    fileList={fileList}\n                    showUploadList={true}\n                    accept=\"image/*\"\n                    className=\"avatar-uploader\"\n                    beforeUpload={() => false}\n                    name=\"fotoestudante\"\n                    onChange={handleChange}\n                    onPreview={handlePreview}\n                  >\n                    {imageupload === true ? null : uploadButton}\n                  </Upload>\n                  {/* <Upload\n                  listType=\"picture-card\"\n                  fileList={fileList}\n                  onChange={handleChange}\n                >\n                  {imageupload === true ? null : uploadButton}\n                </Upload>*/}\n                </Form.Item>\n\n              </div>\n            </Form>\n\n          </Col>\n        </Row>\n        <br />\n        <Row>\n          <Col xs={0} sm={0} md={0} lg={5} xl={5}>\n            <Button\n              id={\"buttonPrev\"}\n              type={\"primary\"}\n              icon={<VerticalRightOutlined />}\n              loading={loadingback}\n              onClick={() => {\n                setLoadingback(true)\n                form1.submit()\n              }}\n            >\n              Salvar e voltar\n          </Button>\n          </Col>\n          <Col xs={6} sm={6} md={6} lg={0} xl={0}>\n            <Button\n              id={\"buttonPrev\"}\n              type={\"primary\"}\n              icon={<VerticalRightOutlined />}\n              loading={loadingback}\n              onClick={() => {\n                setLoadingback(true)\n                form1.submit()\n              }}\n            />\n          </Col>\n          <Col xs={1} sm={1} md={1} lg={14} xl={14} />\n          <Col xs={17} sm={17} md={17} lg={5} xl={5}>\n            <Button\n              id={\"buttonNext\"}\n              icon={<VerticalLeftOutlined />}\n              type=\"primary\"\n              loading={loading}\n              onClick={() => {\n                setLoading(true)\n                form1.submit()\n              }}\n            >\n              Salvar e continuar\n          </Button>\n          </Col>\n        </Row>\n      </Skeleton>\n    </div>\n  );\n}","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\primeiraVia\\pages\\forms_cadastro\\CarteiraEstudante.tsx",["202","203"],"C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\primeiraVia\\pages\\forms_cadastro\\ComprovanteEndereco.tsx",["204"],"/* eslint-disable quotes */\nimport React, { useEffect, useState } from 'react';\n// eslint-disable-next-line object-curly-newline\nimport { Image, Form, Input, Col, Row, message, Button, Upload, Skeleton } from 'antd';\nimport MaskedInput from 'antd-mask-input';\nimport 'antd/dist/antd.css';\nimport { validarImg } from '../cadastro/CadastroPessoa';\nimport { buscarCep, getBase64, getIdUser, logout, validateMaskValue } from '../../../globals/globalFunctions';\nimport { UploadOutlined, VerticalLeftOutlined, VerticalRightOutlined } from '@ant-design/icons';\nimport { getDadosPessoa, getDocumentPicture, getDocuments, setComprovanteEndereco, setDadosComprovanteEndereco } from '../../../services/AccessServices';\nimport { useHistory } from 'react-router-dom';\nimport Modal from 'antd/lib/modal/Modal';\n\ninterface MyObject {\n  logradouro: string;\n  bairro: string;\n  localidade: string;\n  uf: string;\n}\n\nexport default function ComprovanteEndereco(props: any) {\n  let obj = getIdUser()\n  let history = useHistory()\n\n  const [cepExist, setCepExist] = useState(true);\n  const [idUser] = useState(obj.id)\n  const [imageupload, setImageUploadvalid] = useState(false);\n  const [imagedata, setimagedata] = useState({});\n  const [imageaproved, setimagearpoved] = useState('error');\n  const [previewVisible, setPreviewVisible] = useState(false);\n  const [previewImage, setPreviewImage] = useState('');\n  const [previewTitle, setPreviewTitle] = useState('');\n  const [loading, setLoading] = useState(false)\n  const [loadingback, setLoadingback] = useState(false)\n  const [loadingSkeleton, setLoadingSkeleton] = useState(true)\n\n  const [fileList, setFileList] = useState<any[]>([])\n\n  const normFile = (e: any) => {\n    if (e.file.status !== 'removed') {\n      setImageUploadvalid(true);\n      if (e.file.type === 'image/png' || e.file.type === 'image/jpeg' || e.file.type === 'application/pdf') {\n        if (e.file.size / 1024 / 1024 > 5) {\n          // erro de tamanho\n          validarImg('size');\n          setimagearpoved('size');\n          e.fileList[0].status = 'error';\n        } else {\n          const form = new FormData();\n          form.append('comprovanteendereco', e.fileList[0].originFileObj);\n          setimagedata(form);\n          setimagearpoved('done');\n        }\n      } else if (e.file.type !== 'image/png' || e.file.type !== 'image/jpeg' || e.file.type !== 'application/pdf') {\n        // erro de formato\n        validarImg('format');\n        setimagearpoved('format');\n        e.fileList[0].status = 'error';\n      }\n    } else if (e.file.status === 'removed') {\n      setImageUploadvalid(false);\n      setimagearpoved('error');\n    }\n  };\n  const [cep] = useState<MyObject>({\n    logradouro: '',\n    bairro: '',\n    localidade: '',\n    uf: '',\n  });\n\n  const updateCEP = async (e: any) => {\n    // buscarCep(e)\n    const cepvalue = e.target.value\n    let cepData = await buscarCep(cepvalue)\n    if (cepData !== undefined) {\n      form.setFieldsValue(cepData)\n      setCepExist(true)\n    } else {\n      setCepExist(false)\n    }\n  }\n\n  useEffect(() => {\n    getDadosPessoa(idUser).then((res: any) => {\n      let pessoa = res.data.pessoa\n      form.setFieldsValue(pessoa);\n    });\n\n    getDocuments(idUser)\n      .then((res: any) => {\n        let docCompEndereco = res.data.result.doccomprovanteendereco\n\n        if (docCompEndereco !== null) {\n          let docCompEnderecoIsPdf = docCompEndereco.split('.')[1] === 'pdf'\n          getDocumentPicture(idUser, docCompEndereco)\n            .then((res: any) => {\n              if (res.data.statusCode === undefined) {\n                let image = {\n                  uid: '-2',\n                  name: 'Comprovante Endereco',\n                  status: 'done',\n                  url: res.data.url,\n                  type: docCompEnderecoIsPdf ? \"application/pdf\" : \"image/jpeg\"\n                }\n\n                setFileList([image])\n                setImageUploadvalid(true)\n                setimagearpoved('done')\n              }\n              setLoadingSkeleton(false)\n            })\n        } else {\n          setLoadingSkeleton(false)\n        }\n      })\n  }, []);\n\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const [form] = Form.useForm();\n  const sendValues = (values: any) => {\n    let cepIsValid = validateMaskValue(values.cep, 8, \"cep\")\n\n    if (cepExist && cepIsValid) {\n      setDadosComprovanteEndereco(idUser, values)\n        .then((res: any) => {\n          if (res === undefined) {\n            logout()\n            history.replace(\"/\")\n          } else {\n            if (res.status === 200) {\n              message.success('Dados salvo com sucesso');\n            } else {\n              message.error('Não foi possivel salvar seu documento');\n            }\n            if (loadingback) {\n              props.goToPrev()\n            } else {\n              props.goToNext()\n            }\n          }\n        })\n        .catch(() => {\n          message.error(\n            'Não foi possivel salvar seus dados, caso o erro persista, fale conosco',\n          );\n        });\n    } else {\n      message.error(\"CEP inválido!\")\n      setLoading(false)\n      setLoadingback(false)\n    }\n  };\n  const onFinish = (values: any) => {\n    let cepIsValid = validateMaskValue(values.cep, 8, \"cep\")\n\n    if (cepIsValid) {\n      if (imageaproved === 'done') {\n        setComprovanteEndereco(idUser, imagedata, props.idTransaction)\n          .then((res: any) => {\n            if (res === undefined) {\n              logout()\n              history.replace(\"/\")\n            } else {\n              if (res.status === 200) {\n                sendValues(values);\n              } else {\n                message.error('Não foi possivel salvar seu documento');\n                setLoading(false)\n              }\n            }\n          })\n          .catch(() => {\n            message.error(\n              'Não foi possivel salvar seus dados, caso o erro persista, fale conosco',\n            );\n            setLoading(false)\n          });\n      } else {\n        if (!imageupload) {\n          message.error(\"Por favor, envie a foto...\")\n        }\n\n        validarImg(imageaproved);\n        setLoading(false)\n      }\n    } else {\n      setLoading(false)\n    }\n  };\n\n  const onFinishFailed = () => {\n    message.error('Não foi possivel salvar seus dados');\n    setLoading(false)\n  }\n\n  const validateMessages = {\n    required: 'Esse campo é obrigatorio',\n  }\n\n  const uploadButton = (\n    <Button icon={<UploadOutlined />}>Carregar Comprovante de Endereço</Button>\n  )\n\n  const handleChange = (e: any) => {\n    try {\n      setFileList(e.fileList)\n    } catch (error) {\n    }\n  }\n\n  const handlePreview = async (file: any) => {\n    if (!file.url && !file.preview) {\n      file.preview = await getBase64(file.originFileObj);\n    }\n\n    if (file.type === 'application/pdf') {\n      const pdfWindow = window.open('');\n      pdfWindow?.document.write(\n        `<iframe width='100%' height='100%' src='${file.url || file.preview}'></iframe>`,\n      );\n    } else {\n      setPreviewImage(file.url || file.preview)\n      setPreviewVisible(true)\n      setPreviewTitle(file.name || file.url.substring(file.url.lastIndexOf('/') + 1))\n    }\n  }\n\n  return (\n    <div>\n      <Modal\n        visible={previewVisible}\n        title={previewTitle}\n        footer={null}\n        onCancel={() => setPreviewVisible(false)}\n      >\n        <Image alt=\"example\" style={{ width: '100%' }} src={previewImage} />\n      </Modal>\n      <Skeleton loading={loadingSkeleton} active>\n        <Form\n          form={form}\n          validateMessages={validateMessages}\n          name=\"doccomprovanteresidencia\"\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <Row>\n            <Col xs={24} sm={24} md={24} lg={16} xl={16}>\n              <Row>\n                <Col span={24} lg={14} xl={14}>\n                  <p className={\"labelInputField\"}>* CEP:</p>\n                  <Form.Item\n                    name=\"cep\"\n                    rules={[{ required: true, message: 'Insira seu CEP!' }]}\n                  >\n                    <MaskedInput className={\"inputText\"} mask=\"11111-111\" onBlur={updateCEP} />\n                  </Form.Item>\n                </Col>\n                <Col span={24} lg={10} xl={10}>\n                  <p className={\"labelInputField\"}>* Número:</p>\n                  <Form.Item\n                    name=\"numero\"\n                    rules={[\n                      {\n                        required: true,\n                        message: 'Insira número do seu endereço de moradia',\n                      },\n                    ]}\n                  >\n                    <Input className={\"inputText\"} />\n                  </Form.Item>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={12} xl={12}>\n                  <p className={\"labelInputField\"}>* Logradouro:</p>\n                  <Form.Item\n                    initialValue={cep.logradouro}\n                    name=\"logradouro\"\n                    rules={[\n                      { required: true, message: 'Insira seu logradouro de moradia' },\n                    ]}\n                  >\n                    <Input className={\"inputText\"} />\n                  </Form.Item>\n\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={12} xl={12}>\n                  <p className={\"labelInputField\"}>* Bairro:</p>\n                  <Form.Item\n                    initialValue={cep.bairro}\n                    name=\"bairro\"\n                    rules={[\n                      { required: true, message: 'Insira seu bairro de moradia' },\n                    ]}\n                  >\n                    <Input className={\"inputText\"} />\n                  </Form.Item>\n\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={18} xl={18}>\n                  <p className={\"labelInputField\"}>* Cidade:</p>\n                  <Form.Item\n                    name=\"localidade\"\n                    rules={[\n                      { required: true, message: 'Insira sua cidade de moradia' },\n                    ]}\n                  >\n                    <Input className={\"inputText\"} value={cep.localidade} />\n                  </Form.Item>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={6} xl={6}>\n                  <p className={\"labelInputField\"}>* UF:</p>\n                  <Form.Item\n                    name=\"uf\"\n                    rules={[\n                      { required: true, message: 'Insira seu estado de moradia' },\n                    ]}\n                  >\n                    <MaskedInput className={\"inputText\"} value={cep.uf} mask=\"AA\" />\n                  </Form.Item>\n\n                </Col>\n              </Row>\n            </Col>\n\n            <Col xs={24} sm={24} md={24} lg={1} xl={1} />\n\n            <Col xs={24} sm={24} md={24} lg={7} xl={7}>\n              <div id=\"info-envio-foto\">\n                <p className={\"labelInputField\"}>Comprovante de Endereço:</p>\n                <p className={\"subTitleMainPJustified\"}>O COMPROVANTE DE RESIDÊNCIA tem que estar atualizado ( ser no máximo dos últimos dois meses), estar legível, estar no nome do próprio estudante, pais, avós, cônjuge e responsáveis legais, no formato JPG, PNG ou PDF.</p>\n                <Form.Item\n                  // valuePropName=\"fileList\"\n                  getValueFromEvent={normFile}\n                  name=\"file\"\n                  status=\"error\"\n                >\n                  <Upload\n                    fileList={fileList}\n                    listType=\"picture\"\n                    multiple={false}\n                    accept=\"image/*, .pdf\"\n                    beforeUpload={() => false}\n                    onChange={handleChange}\n                    onPreview={handlePreview}\n                    name=\"file\"\n                  >\n                    {imageupload === true ? null : uploadButton}\n                  </Upload>\n                </Form.Item>\n              </div>\n            </Col>\n          </Row>\n          <br />\n          <Row>\n            <Col xs={0} sm={0} md={0} lg={5} xl={5}>\n              <Button\n                id={\"buttonPrev\"}\n                type={\"primary\"}\n                icon={<VerticalRightOutlined />}\n                loading={loadingback}\n                onClick={() => {\n                  setLoadingback(true)\n                  form.submit()\n                }}\n              >\n                Salvar e voltar\n              </Button>\n            </Col>\n            <Col xs={6} sm={6} md={6} lg={0} xl={0}>\n              <Button\n                id={\"buttonPrev\"}\n                type={\"primary\"}\n                icon={<VerticalRightOutlined />}\n                loading={loadingback}\n                onClick={() => {\n                  setLoadingback(true)\n                  form.submit()\n                }}\n              />\n            </Col>\n            <Col xs={1} sm={1} md={1} lg={14} xl={14} />\n            <Col xs={17} sm={17} md={17} lg={5} xl={5}>\n              <Button\n                id={\"buttonNext\"}\n                icon={<VerticalLeftOutlined />}\n                type=\"primary\"\n                loading={loading}\n                onClick={() => {\n                  setLoading(true)\n                  form.submit()\n                }}\n              >\n                Salvar e continuar\n            </Button>\n            </Col>\n          </Row>\n\n        </Form>\n      </Skeleton>\n    </div>\n  );\n}\n","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\primeiraVia\\pages\\forms_cadastro\\ComprovanteMatricula.tsx",["205","206"],"/* eslint-disable quotes */\nimport React, { useEffect, useState } from 'react';\n// eslint-disable-next-line object-curly-newline\nimport {\n  Form,\n  Upload,\n  Input,\n  Col,\n  Row,\n  Select,\n  message,\n  Button,\n  Image,\n  Skeleton\n} from 'antd';\nimport 'antd/dist/antd.css';\nimport { validarImg } from '../cadastro/CadastroPessoa';\nimport { getBase64, getIdUser, logout } from '../../../globals/globalFunctions';\nimport { UploadOutlined, VerticalLeftOutlined, VerticalRightOutlined } from '@ant-design/icons';\nimport { MaskedInput } from 'antd-mask-input';\nimport { getDadosPessoa, getDocumentPicture, getDocuments, setComprovanteMatricula, setDadosComprovanteMatricula } from '../../../services/AccessServices';\nimport { useHistory } from 'react-router-dom';\nimport Modal from 'antd/lib/modal/Modal';\n\n\nconst { Option } = Select;\nexport default function ComprovanteMatricula(props: any) {\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const [form] = Form.useForm();\n\n  let obj = getIdUser()\n  let history = useHistory()\n\n  const [idUser] = useState(obj.id)\n  const [errorPic, setErrorPic] = useState(false);\n  const [imageupload, setImageUploadvalid] = useState(false);\n  const [imagedata, setimagedata] = useState({});\n  const [imageaproved, setimagearpoved] = useState('error');\n  const [previewVisible, setPreviewVisible] = useState(false);\n  const [previewImage, setPreviewImage] = useState('');\n  const [previewTitle, setPreviewTitle] = useState('');\n  const [loadingSkeleton, setLoadingSkeleton] = useState(true)\n  const [loading, setLoading] = useState(false);\n  const [loadingback, setLoadingback] = useState(false)\n\n  const [fileList, setFileList] = useState<any[]>([])\n\n  const normFile = (e: any) => {\n    if (e.file.status !== 'removed') {\n      setImageUploadvalid(true);\n      if (e.file.type === 'image/png' || e.file.type === 'image/jpeg' || e.file.type === 'application/pdf') {\n        if (e.file.size / 1024 / 1024 > 5) {\n          // erro de tamanho\n          validarImg('size');\n          setimagearpoved('size');\n          e.fileList[0].status = 'error';\n        } else {\n          const form = new FormData();\n          form.append('comprovantematricula', e.fileList[0].originFileObj);\n          setimagedata(form);\n          setimagearpoved('done');\n        }\n      } else if (e.file.type !== 'image/png' || e.file.type !== 'image/jpeg' || e.file.type !== 'application/pdf') {\n        // erro de formato\n        validarImg('format');\n        setimagearpoved('format');\n        e.fileList[0].status = 'error';\n      }\n    } else if (e.file.status === 'removed') {\n      setImageUploadvalid(false);\n      setimagearpoved('error');\n    }\n  };\n\n  const sendValues = (values: any) => {\n    setDadosComprovanteMatricula(idUser, values)\n      .then((res: any) => {\n        if (res === undefined) {\n          logout()\n          history.replace(\"/\")\n        } else {\n          if (res.status === 200) {\n            message.success('Dados salvo com sucesso');\n          } else {\n            message.error('Não foi possivel salvar seu documento');\n          }\n          if (loadingback) {\n            props.goToPrev()\n          } else {\n            props.goToNext()\n          }\n        }\n      })\n      .catch(() => {\n        message.error(\n          'Não foi possivel salvar seus dados, caso o erro persista, fale conosco',\n        );\n      });\n  };\n  const onFinish = (values: any) => {\n    if (imageaproved === 'done') {\n      setComprovanteMatricula(idUser, imagedata, props.idTransaction)\n        .then((res: any) => {\n          if (res === undefined) {\n            logout()\n            history.replace(\"/\")\n          } else {\n            if (res.status === 200) {\n              sendValues(values);\n            } else {\n              message.error('Não foi possivel salvar seu documento');\n            }\n            setLoading(false)\n            setLoadingback(false)\n          }\n        })\n        .catch(() => {\n          message.error(\n            'Não foi possivel salvar seus dados, caso o erro persista, fale conosco',\n          );\n          setLoading(false)\n          setLoadingback(false)\n        });\n    } else {\n      if (!imageupload) {\n        message.error(\"Por favor, envie a foto...\")\n        setErrorPic(true)\n        setLoading(false)\n        setLoadingback(false)\n      }\n      validarImg(imageaproved);\n    }\n  }\n\n  const onFinishFailed = () => {\n    message.error('Não foi possivel salvar seus dados');\n    setLoading(false)\n    setLoadingback(false)\n  }\n\n  useEffect(() => {\n    getDadosPessoa(idUser).then((res: any) => {\n      let pessoa = res.data.pessoa\n      form.setFieldsValue(pessoa);\n    });\n\n    getDocuments(idUser)\n      .then((res: any) => {\n        let docCompMatricula = res.data.result.doccomprovantematricula\n\n        if (docCompMatricula !== null) {\n          let docCompMatriculaIsPdf = docCompMatricula.split('.')[1] === 'pdf'\n\n          getDocumentPicture(idUser, docCompMatricula)\n            .then((res: any) => {\n              if (res.data.statusCode === undefined) {\n                let image = {\n                  uid: '-2',\n                  name: 'Comprovante de Matricula',\n                  status: 'done',\n                  url: res.data.url,\n                  type: docCompMatriculaIsPdf ? \"application/pdf\" : \"image/jpeg\"\n                }\n\n                setFileList([image])\n                setImageUploadvalid(true)\n                setimagearpoved('done')\n              }\n              setLoadingSkeleton(false)\n            })\n            .catch(() => {\n              setLoadingSkeleton(false)\n            })\n        } else {\n          setLoadingSkeleton(false)\n        }\n      })\n  }, []);\n\n  const handleChange = (e: any) => {\n    try {\n      setFileList(e.fileList)\n    } catch (error) {\n    }\n  }\n\n  const handlePreview = async (file: any) => {\n    if (!file.url && !file.preview) {\n      file.preview = await getBase64(file.originFileObj);\n    }\n\n    if (file.type === 'application/pdf') {\n      const pdfWindow = window.open('');\n      pdfWindow?.document.write(\n        `<iframe width='100%' height='100%' src='${file.url || file.preview}'></iframe>`,\n      );\n    } else {\n      setPreviewImage(file.url || file.preview)\n      setPreviewVisible(true)\n      setPreviewTitle(file.name || file.url.substring(file.url.lastIndexOf('/') + 1))\n    }\n  }\n\n  const validateMessages = {\n    required: 'Esse campo é obrigatorio',\n  }\n\n  const uploadButton = (\n    <Button icon={<UploadOutlined />}>Carregar Comprovante de Matrícula</Button>\n  )\n\n  return (\n    <div>\n      <Skeleton loading={loadingSkeleton} active>\n        <Modal\n          visible={previewVisible}\n          title={previewTitle}\n          footer={null}\n          onCancel={() => setPreviewVisible(false)}\n        >\n          <Image alt=\"example\" style={{ width: '100%' }} src={previewImage} />\n        </Modal>\n\n        <Form\n          form={form}\n          validateMessages={validateMessages}\n          name=\"comprovantematricula\"\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <Row>\n            <Col xs={24} sm={24} md={24} lg={11} xl={11}>\n              <Row>\n                <Col span={24}>\n                  <p className={\"labelInputField\"}>* Tipo de Comprovante:</p>\n                  <Form.Item\n                    name=\"tpcomprovantematricula\"\n                    rules={[{ required: true }]}\n                  >\n                    <Select\n                      className={\"formItemSelector\"}\n                      placeholder=\"Selecione\"\n                      bordered={false}\n                      allowClear\n                    >\n                      <Option value=\"boleto\">Boleto</Option>\n                      <Option value=\"atestadomatricula\">Atestado de Matrícula</Option>\n                    </Select>\n                  </Form.Item>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={14} xl={14}>\n                  <p className={\"labelInputField\"}>Número da Matrícula:</p>\n                  <Form.Item\n                    name=\"numregistro\"\n                  // rules={[\n                  //   {\n                  //     required: true,\n                  //     message: 'Insira seu Número de Matrícula',\n                  //   },\n                  // ]}\n                  >\n                    <Input className={\"inputText\"} />\n                  </Form.Item>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={10} xl={10}>\n                  <p className={\"labelInputField\"}>Ano de Conclusão:</p>\n                  <Form.Item\n                    name=\"anodeconclusao\"\n                  // rules={[{ required: true, message: 'Insira o Ano de Conclusão' }]}\n                  >\n                    <MaskedInput mask={\"1111\"} className={\"inputText\"} />\n                    {/* <DatePicker\n                    className={\"formItemSelector\"}\n                    picker=\"year\" \n                  /> */}\n                  </Form.Item>\n                </Col>\n              </Row>\n            </Col>\n            <Col xs={0} sm={0} md={0} lg={1} xl={1} />\n            <Col xs={24} sm={24} md={24} lg={12} xl={12}>\n              <div id=\"info-envio-foto\">\n                <p className={\"titleUploadArea\"}>O Documento de comprovação estudantil enviado deve conter:</p>\n                <p className={\"subTitleMainPJustified\"}>Selecione o tipo de COMPROVANTE DE MATRICULA e anexe, para que possamos confirmar os seus dados. O documento selecionado deve ser atual (no máximo 3 meses da data de assinatura), constar o nome do aluno, bem como o da Instituição na qual está matriculado. Os documentos devem constar carimbo e assinatura do responsável. As informações precisam estar legíveis e nos formatos JPG, PNG ou PDF.</p>\n                <Row>\n                  <Col span={24}>\n                    {/* <p className={\"labelInputField\"}>Comprovante de Matrícula:</p> */}\n                    <Form.Item\n                      valuePropName=\"filefrente\"\n                      getValueFromEvent={normFile}\n                      name=\"file1\"\n                      status=\"error\"\n                    >\n                      <Upload\n                        fileList={fileList}\n                        listType=\"picture\"\n                        multiple={false}\n                        accept=\"image/*, .pdf\"\n                        beforeUpload={() => false}\n                        name=\"file1\"\n                        onChange={handleChange}\n                        onPreview={handlePreview}\n                        showUploadList={true}\n                      >\n                        {imageupload === true ? null : uploadButton}\n                      </Upload>\n                    </Form.Item>\n                  </Col>\n                </Row>\n\n              </div>\n            </Col>\n          </Row>\n        </Form>\n        <br />\n        <Row>\n          <Col xs={0} sm={0} md={0} lg={5} xl={5}>\n            <Button\n              id={\"buttonPrev\"}\n              type={\"primary\"}\n              icon={<VerticalRightOutlined />}\n              loading={loadingback}\n              onClick={() => {\n                setLoadingback(true)\n                form.submit()\n              }}\n            >\n              Salvar e voltar\n          </Button>\n          </Col>\n          <Col xs={6} sm={6} md={6} lg={0} xl={0}>\n            <Button\n              id={\"buttonPrev\"}\n              type={\"primary\"}\n              icon={<VerticalRightOutlined />}\n              loading={loadingback}\n              onClick={() => {\n                setLoadingback(true)\n                form.submit()\n              }}\n            />\n          </Col>\n          <Col xs={1} sm={1} md={1} lg={14} xl={14} />\n          <Col xs={17} sm={17} md={17} lg={5} xl={5}>\n            <Button\n              id={\"buttonNext\"}\n              icon={<VerticalLeftOutlined />}\n              type=\"primary\"\n              loading={loading}\n              onClick={() => {\n                setLoading(true)\n                form.submit()\n              }}\n            >\n              Salvar e continuar\n            </Button>\n          </Col>\n        </Row>\n      </Skeleton>\n    </div>\n  );\n}\n","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\primeiraVia\\pages\\forms_cadastro\\DocumentoIdentificacao.tsx",["207"],"/* eslint-disable quotes */\nimport React, { useState, useEffect } from 'react';\n// eslint-disable-next-line object-curly-newline\nimport {\n  Form,\n  Upload,\n  Input,\n  Skeleton,\n  Col,\n  Row,\n  Image,\n  Select,\n  message,\n  Button,\n} from 'antd';\nimport 'antd/dist/antd.css';\nimport moment from 'moment';\nimport { checkDateFieldData, date1IsAfterOrEqualThenDate2, getBase64, getDateFromMoment, getIdUser, logout } from '../../../globals/globalFunctions';\nimport '../../../globals/globalStyle.css';\nimport { UploadOutlined, VerticalLeftOutlined, VerticalRightOutlined } from '@ant-design/icons';\nimport { getDadosPessoa, getDocumentPicture, getDocuments, setDadosIdentificacao, setIdentificaoFrente, setIdentificaoVerso } from '../../../services/AccessServices';\nimport InputMask from 'antd-mask-input';\nimport { useHistory } from 'react-router-dom';\nimport Modal from 'antd/lib/modal/Modal';\n\nconst { Option } = Select;\n\ninterface Dataimg {\n  imgfrente: any;\n  imgverso: any;\n  aprovedfrente: string;\n  aprovedverso: string;\n}\n\ninterface UploadButton {\n  buttonfrente: any;\n  buttonverso: any;\n}\n\nexport default function Documentoident(props: any) {\n  let obj = getIdUser()\n  let history = useHistory()\n\n  const [idUser] = useState(obj.id)\n  const [dateNascimento, setDateNascimento] = useState('')\n  const [dateNascimentoIsValid, setDateNascIsValid] = useState(false)\n  const [hiddenRG, setHiddenRG] = useState(false);\n  const [hiddenNumRegistro, setHiddenNumRegistro] = useState(true);\n  const [previewVisible, setPreviewVisible] = useState(false);\n  const [previewImage, setPreviewImage] = useState('');\n  const [previewTitle, setPreviewTitle] = useState('');\n  const [fileListFront, setFileListFront] = useState<any[]>([])\n  const [fileListBack, setFileListBack] = useState<any[]>([])\n  const [loadingSkeleton, setLoadingSkeleton] = useState(true)\n  const [loading, setLoading] = useState(false)\n  const [loadingback, setLoadingback] = useState(false)\n\n  const [imagedata, setimagedata] = useState<Dataimg | any>({\n    imgfrente: { size: '', type: '' },\n    imgverso: { size: '', type: '' },\n    aprovedfrente: 'error',\n    aprovedverso: 'error',\n  });\n  const [imageupload, setImageUploadvalid] = useState<UploadButton | any>({\n    buttonfrente: false,\n    buttonverso: false,\n  });\n\n  useEffect(() => {\n    getDocuments(idUser)\n      .then((res: any) => {\n        let docVerso = res.data.result.docidentidadeverso\n        let docFront = res.data.result.docidentidadefrente\n\n        if (docVerso !== null && docFront !== null) {\n          let docVersoIsPdf = docVerso.split('.')[1] === 'pdf'\n          let docFrontIsPdf = docFront.split('.')[1] === 'pdf'\n\n          getDocumentPicture(idUser, docVerso)\n            .then((res: any) => {\n              if (res.data.statusCode === undefined) {\n                let imageBack = {\n                  uid: '-2',\n                  name: 'Documento Verso',\n                  status: 'done',\n                  url: res.data.url,\n                  type: docVersoIsPdf ? \"application/pdf\" : \"image/jpeg\"\n                }\n\n                getDocumentPicture(idUser, docFront)\n                  .then((res1: any) => {\n                    if (res1.statusCode === undefined) {\n\n                      let imageFront = {\n                        uid: '-1',\n                        name: 'Documento Front',\n                        status: 'done',\n                        url: res1.data.url,\n                        type: docFrontIsPdf ? \"application/pdf\" : \"image/jpeg\"\n                      }\n\n                      setFileListBack([imageBack])\n                      setFileListFront([imageFront])\n\n                      setimagedata({\n                        ...imagedata,\n                        aprovedverso: 'done',\n                        aprovedfrente: 'done'\n                      });\n\n                      setImageUploadvalid({\n                        buttonfrente: true,\n                        buttonverso: true\n                      });\n\n                    }\n                    setLoadingSkeleton(false)\n                  })\n              }\n              setLoadingSkeleton(false)\n            })\n            .catch(() => {\n              setLoadingSkeleton(false)\n            })\n        } else {\n          setLoadingSkeleton(false)\n        }\n      })\n\n    getDadosPessoa(idUser).then((res: any) => {\n      if (res === undefined) {\n        logout()\n        history.replace(\"/\")\n      } else {\n        let pessoa = res.data.pessoa\n        form.setFieldsValue({ \"nome\": pessoa.nome })\n\n        if (pessoa.datanascimento !== null || pessoa.datanascimento !== undefined) {\n          setDateNascIsValid(true)\n        }\n\n        if (pessoa.tipodocumento === null || pessoa.tipodocumento === undefined) {\n          pessoa.tipodocumento = \"rg\"\n        }\n\n        hiddencampos(pessoa.tipodocumento);\n        form.setFieldsValue(pessoa);\n      }\n    });\n  }, []);\n\n  const hiddencampos = (values: any) => {\n    if (values === 'rg') {\n      setHiddenRG(false);\n      setHiddenNumRegistro(true);\n    } else if (values === 'cnh') {\n      setHiddenNumRegistro(false);\n      setHiddenRG(true);\n    }\n  };\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const [form] = Form.useForm();\n\n  const normFilefrente = (e: any) => {\n    if (e.file.status !== 'removed') {\n      setImageUploadvalid({ ...imageupload, buttonfrente: true });\n      if (ValideSize(e.fileList[0].size) && Valideformat(e.fileList[0].type)) {\n        e.fileList[0].status = 'done';\n        setimagedata({\n          ...imagedata,\n          imgfrente: e.fileList[0].originFileObj,\n          aprovedfrente: 'done',\n        });\n      } else {\n        e.fileList[0].status = 'error';\n      }\n    } else if (e.file.status === 'removed') {\n      // setImageUploadvalid({ ...imageupload, buttonfrente: false });\n      setimagedata({\n        ...imagedata,\n        aprovedfrente: 'error',\n      });\n    }\n  };\n\n  const normFileverso = (e: any) => {\n    if (e.file.status !== 'removed') {\n      setImageUploadvalid({ ...imageupload, buttonverso: true });\n      if (ValideSize(e.fileList[0].size) && Valideformat(e.fileList[0].type)) {\n        e.fileList[0].status = 'done';\n        setimagedata({\n          ...imagedata,\n          imgverso: e.fileList[0].originFileObj,\n          aprovedverso: 'done',\n        });\n      } else {\n        e.fileList[0].status = 'error';\n      }\n    } else if (e.file.status === 'removed') {\n      setImageUploadvalid({\n        ...imageupload,\n        buttonverso: false,\n        aprovedverso: 'error',\n      });\n    }\n  };\n\n  const ValideSize = (size: any) => {\n    if (size / 1024 / 1024 > 5) {\n      message.error('Tamanho maximo de arquivo deve ser de 5MB');\n      return false;\n    }\n    return true;\n  };\n\n  const Valideformat = (format: any) => {\n    if (\n      // eslint-disable-next-line operator-linebreak\n      format === 'image/png' ||\n      // eslint-disable-next-line operator-linebreak\n      format === 'image/jpeg' ||\n      format === 'image/jpg' ||\n      format === 'application/pdf'\n    ) {\n      return true;\n    }\n    message.error('Formato não aceito, apenas PDF, PNG, JPG e JPEG');\n\n    return false;\n  };\n\n\n  const savefoto = () => {\n    const imgversodoc = new FormData();\n    const imgfrentedoc = new FormData();\n\n    imgversodoc.append('imgversodoc', imagedata.imgverso);\n    imgfrentedoc.append('imgfrentedoc', imagedata.imgfrente);\n\n    setIdentificaoVerso(idUser, imgversodoc, props.idTransaction)\n      .then((res: any) => {\n        if (res === undefined) {\n          logout()\n          history.replace(\"/\")\n        }\n      })\n      .catch(() => {\n        message.error(\n          'Não foi possivel salvar seus dados, caso o erro persista, fale conosco',\n        );\n        setLoading(false)\n        setLoadingback(false)\n      });\n\n    setIdentificaoFrente(idUser, imgfrentedoc, props.idTransaction)\n      .then((res: any) => {\n        if (res === undefined) {\n          logout()\n          history.replace(\"/\")\n        } else {\n          if (res.status === 200) {\n            message.success('Dados salvo com sucesso');\n          } else {\n            message.error('Não foi possivel salvar seus dados');\n          }\n          setLoading(false)\n          setLoadingback(false)\n        }\n      })\n      .catch(() => {\n        message.error(\n          'Não foi possivel salvar seus dados, caso o erro persista, fale conosco',\n        );\n        setLoading(false)\n        setLoadingback(false)\n      });\n  };\n\n  const onFinish = (values: any) => {\n    if (dateNascimentoIsValid) {\n      if (\n        // eslint-disable-next-line operator-linebreak\n        imagedata.aprovedfrente === 'done' &&\n        imagedata.aprovedverso === 'done'\n      ) {\n        setDadosIdentificacao(idUser, values)\n          .then((res: any) => {\n            if (res === undefined) {\n              logout()\n              history.replace(\"/\")\n            } else {\n              if (res.status === 200) {\n                savefoto();\n                if (loadingback) {\n                  props.goToPrev()\n                } else {\n                  props.goToNext()\n                }\n              } else {\n                message.error('Não foi possivel salvar seus dados');\n                setLoading(false)\n                setLoadingback(false)\n              }\n            }\n          })\n          .catch(() => {\n            message.error(\n              'Não foi possivel salvar seus dados, caso o erro persista, fale conosco',\n            );\n            setLoading(false)\n            setLoadingback(false)\n          });\n      } else {\n        message.error(\n          'Verifique os arquivos marcados de vermelho e tente novamente',\n        );\n        setLoading(false)\n        setLoadingback(false)\n      }\n    } else {\n      message.error(\"Preencha uma data de nascimento válida!\")\n      setLoading(false)\n      setLoadingback(false)\n    }\n  };\n\n  const onFinishFailed = () => {\n    message.error('Não foi possivel salvar seus dados');\n    setLoading(false)\n    setLoadingback(false)\n  };\n\n  const validateMessages = {\n    required: 'Esse campo é obrigatorio',\n  };\n\n\n  const uploadButton = (front: boolean) => {\n    return (front ?\n      (\n        <Button icon={<UploadOutlined />}>Carregar frente</Button>\n      ) : (\n        <Button icon={<UploadOutlined />}>Carregar verso</Button>\n      )\n    )\n  }\n\n  const handleChangeF = (e: any) => {\n    try {\n      setFileListFront(e.fileList)\n    } catch (error) {\n    }\n  }\n\n  const handleChangeB = (e: any) => {\n    try {\n      if (fileListBack.length === 0) {\n        setFileListBack(e.fileList)\n      } else {\n        throw new Error(\"Você já tem uma foto enviada!\");\n      }\n    } catch (error) {\n    }\n  }\n\n  const handlePreview = async (file: any) => {\n    if (!file.url && !file.preview) {\n      file.preview = await getBase64(file.originFileObj);\n    }\n\n    if (file.type === 'application/pdf') {\n      const pdfWindow = window.open('');\n      pdfWindow?.document.write(\n        `<iframe width='100%' height='100%' src='${file.url || file.preview}'></iframe>`,\n      );\n\n    } else {\n      setPreviewImage(file.url || file.preview)\n      setPreviewVisible(true)\n      setPreviewTitle(file.name || file.url.substring(file.url.lastIndexOf('/') + 1))\n    }\n  }\n\n  return (\n    <div>\n      <Modal\n        visible={previewVisible}\n        title={previewTitle}\n        footer={null}\n        onCancel={() => setPreviewVisible(false)}\n      >\n        <Image alt=\"example\" style={{ width: '100%' }} src={previewImage} />\n      </Modal>\n      <Skeleton loading={loadingSkeleton} active>\n        <Form\n          form={form}\n          validateMessages={validateMessages}\n          name=\"docidentidadeestudante\"\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <Row>\n            <Col xs={24} sm={24} md={24} lg={14} xl={14}>\n              <Row>\n                <Col xs={24} sm={24} md={24} lg={24} xl={24}>\n                  <Form.Item\n                    initialValue={\"rg\"}\n                    name=\"tipodocumento\"\n                    rules={[{ required: true }]}\n                  >\n                    <Select\n                      defaultValue={\"rg\"}\n                      className={\"formItemSelector\"}\n                      onChange={hiddencampos}\n                      placeholder=\"Selecione\"\n                      allowClear\n                      bordered={false}\n                    >\n                      <Option value=\"rg\">RG</Option>\n                      <Option value=\"cnh\">CNH</Option>\n                    </Select>\n                  </Form.Item>\n                </Col>\n                {/* <Col xs={24} sm={24} md={24} lg={24} xl={24}>\n                <p className={\"labelInputField\"}>* Nome:</p>\n                <Form.Item\n                  name=\"nome\"\n                  rules={[{ required: true, message: 'Insira seu nome!' }]}\n                >\n                  <Input\n                    className={\"inputText\"}\n                  />\n                </Form.Item>\n              </Col> */}\n                <Col xs={24} sm={24} md={24} lg={14} xl={14}>\n                  {!hiddenRG ?\n                    (\n                      <Row>\n                        <Col xs={24} sm={24} md={24} lg={14} xl={14}>\n                          {hiddenRG ? <p /> : <p className={\"labelInputField\"}>* RG:</p>}\n                          <Form.Item\n                            hidden={hiddenRG}\n                            name=\"rg\"\n                            rules={[{ required: !hiddenRG, message: 'Insira seu RG' }]}\n                          >\n                            <Input className={\"inputText\"} type={\"number\"} />\n                          </Form.Item>\n                        </Col>\n                        <Col xs={24} sm={24} md={24} lg={10} xl={10}>\n                          {hiddenRG ? <p /> : <p className={\"labelInputField\"}>* Orgão Emissor:</p>}\n                          <Form.Item\n                            hidden={hiddenRG}\n                            name=\"orgaoemissor\"\n                            rules={[{ required: !hiddenRG, message: 'Insira o Orgão Emissor' }]}\n                          >\n                            <Input className={\"inputText\"} />\n                          </Form.Item>\n\n                        </Col>\n                      </Row>\n\n                    ) : (\n                      <div />\n                    )\n                  }\n\n                  {hiddenNumRegistro ? <p /> : <p className={\"labelInputField\"}>* Número de Registro:</p>}\n                  <Form.Item\n                    hidden={hiddenNumRegistro}\n                    name=\"registrocnh\"\n                    rules={[\n                      {\n                        required: hiddenRG,\n                        message: 'Insira seu Número de Registro',\n                      },\n                    ]}\n                  >\n                    <Input className={\"inputText\"} type={\"number\"} />\n                  </Form.Item>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={10} xl={10}>\n                  <p className={\"labelInputField\"}>* Data de Nascimento:</p>\n                  <Form.Item\n                    initialValue={dateNascimento}\n                    name=\"datanascimento\"\n                    tooltip={\"O aluno deve ter pelo menos 8 anos completados.\"}\n                    rules={[\n                      {\n                        required: true,\n                        message: 'Insira sua Data de Nascimento',\n                      }\n                    ]}\n                  >\n                    <InputMask\n                      className={\"inputText\"}\n                      mask=\"11/11/1111\"\n                      onChange={(e: any) => {\n                        let dateList = e.target.value.split(\"/\")\n                        if (e.target.value.length === 10) {\n                          // message.info(e.target.value.length+ \" | \" + JSON.stringify(dateList[0])+\" | \"+JSON.stringify(dateList[1])+ \" | \"+JSON.stringify(dateList[2]))\n\n                          let dateConverted = dateList[2] + \"-\" + dateList[1] + \"-\" + dateList[0] + \" 00:00:00\"\n                          var selecteddate = getDateFromMoment(dateConverted);\n\n                          selecteddate.setHours(0)\n                          selecteddate.setMinutes(0)\n                          selecteddate.setSeconds(0)\n\n                          var currentdate = moment(new Date()).format('YYYY/MM/DD HH:mm:ss');\n\n                          var datelimit = getDateFromMoment(currentdate)\n                          datelimit.setDate(datelimit.getDate())\n                          datelimit.setMonth(datelimit.getMonth())\n                          datelimit.setFullYear(datelimit.getFullYear() - 8)\n\n                          var datelimit100 = getDateFromMoment(currentdate)\n                          datelimit100.setDate(datelimit.getDate())\n                          datelimit100.setMonth(datelimit.getMonth())\n                          datelimit100.setFullYear(datelimit.getFullYear() - 100)\n\n                          if (checkDateFieldData(dateList) === 0) {\n                            // message.success(JSON.stringify((dateList)))\n                            if (date1IsAfterOrEqualThenDate2(datelimit, selecteddate) &&\n                              date1IsAfterOrEqualThenDate2(selecteddate, datelimit100)) {\n                              setDateNascimento(e.target.value)\n                              setDateNascIsValid(true)\n                            } else {\n                              // message.error(\"Data de nascimento inválida!\")\n                              setDateNascimento('')\n                              setDateNascIsValid(false)\n                            }\n                          } else {\n                            setDateNascimento('')\n                            setDateNascIsValid(false)\n                          }\n                        }\n                      }}\n                    />\n\n                  </Form.Item>\n\n                </Col>\n\n                <Col xs={24} sm={24} md={24} lg={24} xl={24}>\n                  <p className={\"labelInputField\"}>* Nome da mãe:</p>\n                  <Form.Item\n                    name=\"nomemae\"\n                    rules={[{ required: true, message: 'Insira o nome da Mãe' }]}\n                  >\n                    <Input\n                      className={\"inputText\"}\n                    />\n                  </Form.Item>\n                </Col>\n                <Col xs={24} sm={24} md={24} lg={24} xl={24}>\n                  <p className={\"labelInputField\"}>Nome do Pai:</p>\n                  <Form.Item name=\"nomepai\">\n                    <Input\n                      className={\"inputText\"}\n                    />\n                  </Form.Item>\n                </Col>\n              </Row>\n            </Col>\n            <Col xs={0} sm={0} md={0} lg={1} xl={1} />\n            <Col xs={24} sm={24} md={24} lg={9} xl={9}>\n              <br />\n              <br />\n              <div\n                id=\"info-envio-foto\"\n              >\n                <p className={\"titleUploadArea\"}>ATENÇÃO</p>\n                <p className={\"subTitleMainPJustified\"}>\n                  Informe seus dados de acordo com o tipo de documento escolhido. É necessário que as informações estejam legíveis e iguais as informadas no formulário preenchido e nos formatos JPG, PNG ou PDF.\n              </p>\n                <br />\n                <Row>\n                  <Col xs={1} sm={1} md={1} lg={3} xl={3} />\n                  <Col xs={24} sm={24} md={24} lg={8} xl={8}>\n                    <Form.Item\n                      valuePropName=\"filefrente\"\n                      getValueFromEvent={normFilefrente}\n                      name=\"file1\"\n                      status=\"error\"\n                    >\n                      <Upload\n                        fileList={fileListFront}\n                        listType=\"picture\"\n                        multiple={false}\n                        accept=\"image/*, .pdf\"\n                        beforeUpload={() => false}\n                        name=\"file1\"\n                        showUploadList={true}\n                        onRemove={() => {\n                          let btnverso = imageupload.buttonverso\n                          let apverso = imagedata.aprovedverso\n\n                          setImageUploadvalid({\n                            buttonfrente: false,\n                            buttonverso: btnverso\n                          })\n\n                          setimagedata({\n                            ...imagedata,\n                            aprovedverso: apverso,\n                            aprovedfrente: 'error'\n                          });\n                        }}\n                        onChange={handleChangeF}\n                        onPreview={handlePreview}\n                      >\n                        {fileListFront.length > 0 ? null : uploadButton(true)}\n                      </Upload>\n                    </Form.Item>\n                  </Col>\n                  <Col span={0} lg={2} xl={2} />\n                  <br />\n                  <Col xs={24} sm={24} md={24} lg={8} xl={8}>\n                    <Form.Item\n                      valuePropName=\"fileverso\"\n                      getValueFromEvent={normFileverso}\n                      name=\"file\"\n                      status=\"error\"\n                    >\n                      <Upload\n                        fileList={fileListBack}\n                        listType=\"picture\"\n                        multiple={false}\n                        beforeUpload={() => false}\n                        accept=\"image/*, .pdf\"\n                        name=\"file2\"\n                        showUploadList={true}\n                        onRemove={() => {\n                          let btnfrente = imageupload.buttonfrente\n                          let apvfrente = imagedata.aprovedfrente\n\n                          setImageUploadvalid({\n                            buttonfrente: btnfrente,\n                            buttonverso: false\n                          })\n\n                          setimagedata({\n                            ...imagedata,\n                            aprovedverso: 'error',\n                            aprovedfrente: apvfrente\n                          });\n\n                          setFileListBack([])\n                        }}\n                        onChange={handleChangeB}\n                        onPreview={handlePreview}\n                      >\n                        {fileListBack.length > 0 ? null : uploadButton(false)}\n                      </Upload>\n                    </Form.Item>\n                  </Col>\n                  <Col xs={1} sm={1} md={1} lg={3} xl={3} />\n                </Row>\n                <br />\n              </div>\n            </Col>\n          </Row>\n          <br />\n          <Row>\n            <Col xs={0} sm={0} md={0} lg={5} xl={5}>\n              <Button\n                id={\"buttonPrev\"}\n                type={\"primary\"}\n                icon={<VerticalRightOutlined />}\n                loading={loadingback}\n                onClick={() => {\n                  setLoadingback(true)\n                  form.submit()\n                }}\n              >\n                Salvar e voltar\n              </Button>\n            </Col>\n            <Col xs={6} sm={6} md={6} lg={0} xl={0}>\n              <Button\n                id={\"buttonPrev\"}\n                type={\"primary\"}\n                icon={<VerticalRightOutlined />}\n                loading={loadingback}\n                onClick={() => {\n                  setLoadingback(true)\n                  form.submit()\n                }}\n              />\n            </Col>\n            <Col xs={1} sm={1} md={1} lg={14} xl={14} />\n            <Col xs={17} sm={17} md={17} lg={5} xl={5}>\n              <Button\n                id={\"buttonNext\"}\n                icon={<VerticalLeftOutlined />}\n                type=\"primary\"\n                loading={loading}\n                onClick={() => {\n                  setLoading(true)\n                  form.submit()\n                }}\n              >\n                Salvar e continuar\n              </Button>\n            </Col>\n          </Row>\n        </Form>\n      </Skeleton>\n    </div>\n  );\n}\n","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\primeiraVia\\pages\\forms_cadastro\\FotoEstudante.tsx",["208","209"],"C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\primeiraVia\\pages\\forms_cadastro\\InfoEstudante.tsx",["210"],"C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\atualizacao\\pages\\forms_cadastro\\ComprovanteEndereco.tsx",["211"],"C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\atualizacao\\pages\\forms_cadastro\\CarteiraEstudante.tsx",["212","213"],"/* eslint-disable quotes */\nimport React, { useEffect, useState } from 'react';\n// eslint-disable-next-line object-curly-newline\nimport { Image, Col, Row, Button, Form, Upload, Skeleton, message } from 'antd';\nimport Fotocarteira from '../../../images/carteiraestudante.jpeg';\nimport Fotocarteiraverso from '../../../images/carteiraestudanteverso.jpeg';\nimport { validarImg } from '../cadastro/CadastroPessoa';\nimport { getBase64, getIdUser, logout } from '../../../globals/globalFunctions';\nimport { CheckOutlined, LeftOutlined, UploadOutlined, VerticalRightOutlined } from '@ant-design/icons';\nimport { useHistory } from 'react-router-dom';\nimport Modal from 'antd/lib/modal/Modal';\nimport ModalVerifyInfoEstudante from '../../../visual_components/modals/ModalVerifyInfoEstudante';\nimport { confirmarDocumentos, getDocumentPicture, getDocuments, setFotoCarteira } from '../../../services/AccessServices';\nimport { getTransacao } from '../../../services/PagamentosServices';\n\nexport default function FotoCarteiraEstudante(props: any) {\n  let obj = getIdUser()\n  const history = useHistory()\n  const [form] = Form.useForm();\n  const [errorPic, setErrorPic] = useState(false);\n  const [imageupload, setImageUploadvalid] = useState(false);\n  const [imagedata, setimagedata] = useState({});\n  const [imageaproved, setimagearpoved] = useState('error');\n  const [idUser] = useState(obj.id)\n  const [visible, setVisible] = useState(false)\n  const [previewVisible, setPreviewVisible] = useState(false);\n  const [previewImage, setPreviewImage] = useState('');\n  const [previewTitle, setPreviewTitle] = useState('');\n  const [loading, setLoading] = useState(false)\n  const [loadingback, setLoadingback] = useState(false)\n  const [loadingSkeleton, setLoadingSkeleton] = useState(true)\n\n  const [fileList, setFileList] = useState<any[]>([])\n\n  const normFile = (e: any) => {\n    if (e.file.status !== 'removed') {\n      setImageUploadvalid(true);\n      if (e.file.type === 'image/png' || e.file.type === 'image/jpeg' || e.file.type === 'application/pdf') {\n        if (e.file.size / 1024 / 1024 > 5) {\n          // erro de tamanho\n          validarImg('size');\n          setimagearpoved('size');\n          e.fileList[0].status = 'error';\n        } else {\n          const form = new FormData();\n          form.append('fotocarteira', e.fileList[0].originFileObj);\n          setimagedata(form);\n          setimagearpoved('done');\n        }\n      } else if (e.file.type !== 'image/png' || e.file.type !== 'image/jpeg' || e.file.type !== 'application/pdf') {\n        // erro de formato\n        validarImg('format');\n        setimagearpoved('format');\n        e.fileList[0].status = 'error';\n      }\n    } else if (e.file.status === 'removed') {\n      setImageUploadvalid(false);\n      setimagearpoved('error');\n    }\n  };\n\n  useEffect(() => {\n    getDocuments(idUser)\n      .then((res: any) => {\n        let docCarteiaAtual = res.data.result.doccarteiaatual\n\n        if (docCarteiaAtual !== null) {\n          let docCarteiaAtualIsPdf = docCarteiaAtual.split('.')[1] === 'pdf'\n          getDocumentPicture(idUser, docCarteiaAtual)\n            .then((res: any) => {\n              if (res.data.statusCode === undefined) {\n                let image = {\n                  uid: '-2',\n                  name: 'Carteira Estudante',\n                  status: 'done',\n                  url: res.data.url,\n                  type: docCarteiaAtualIsPdf ? \"application/pdf\" : \"image/jpeg\"\n                }\n\n                setFileList([image])\n                setImageUploadvalid(true)\n                setimagearpoved('done')\n              }\n              setLoadingSkeleton(false)\n            })\n            .catch(() => {\n              setLoadingSkeleton(false)\n            })\n        } else {\n          setLoadingSkeleton(false)\n        }\n      })\n  }, []);\n\n  const onFinish = (values: any) => {\n    if (imageaproved === 'done') {\n      setFotoCarteira(idUser, imagedata, props.idTransaction)\n        .then((res: any) => {\n          if (res === undefined) {\n            logout()\n            history.replace(\"/\")\n          } else {\n            if (res.status === 200) {\n              if (loadingback) {\n                props.goToPrev()\n              } else {\n                setVisible(true)\n              }\n            } else {\n              message.error('Não foi possivel salvar seu documento');\n              setLoading(false)\n              setLoadingback(false)\n            }\n          }\n        })\n        .catch((error: any) => {\n          message.error('Não foi possivel salvar seu documento');\n          setLoading(false)\n          setLoadingback(false)\n        });\n    } else {\n      if (!imageupload) {\n        message.error(\"Por favor, envie a foto...\")\n        setErrorPic(true)\n        setLoading(false)\n        setLoadingback(false)\n      }\n\n      validarImg(imageaproved);\n    }\n  };\n\n  const onFinishFailed = () => {\n    message.error('Não foi possivel salvar seus dados');\n    setLoading(false)\n    setLoadingback(false)\n  };\n\n  const uploadButton = (\n    <Button icon={<UploadOutlined />}>Carregar Carteira de Estudante</Button>\n  )\n\n  const onConfirm = () => {\n    getTransacao(idUser)\n      .then((res: any) => {\n        if (res.data.__transactions__ !== 404) {\n          if (res.status === 200) {\n            const atualizacao = res.data.__transactions__[0].requestStatus;\n            if (atualizacao === \"first\" || atualizacao === null) {\n              confirmarDocumentos(idUser)\n                .then((res: any) => {\n                  message.success('Dados salvo com sucesso');\n                  history.push('/home')\n                })\n                .catch(() => {\n                  setLoading(false)\n                  setLoadingback(false)\n                })\n            } else {\n              message.success('Dados salvo com sucesso');\n              history.push('/home')\n            }\n          }\n        }\n      })\n  }\n\n  const handleChange = (e: any) => {\n    try {\n      setFileList(e.fileList)\n    } catch (error) {\n    }\n  }\n\n  const handlePreview = async (file: any) => {\n    if (!file.url && !file.preview) {\n      file.preview = await getBase64(file.originFileObj);\n    }\n\n    if (file.type === 'application/pdf') {\n      const pdfWindow = window.open('');\n      pdfWindow?.document.write(\n        `<iframe width='100%' height='100%' src='${file.url || file.preview}'></iframe>`,\n      );\n    } else {\n      setPreviewImage(file.url || file.preview)\n      setPreviewVisible(true)\n      setPreviewTitle(file.name || file.url.substring(file.url.lastIndexOf('/') + 1))\n    }\n  }\n\n  return (\n    <div>\n      <Skeleton loading={loadingSkeleton} active>\n        <Modal\n          visible={previewVisible}\n          title={previewTitle}\n          footer={null}\n          onCancel={() => setPreviewVisible(false)}\n        >\n          <Image alt=\"example\" style={{ width: '100%' }} src={previewImage} />\n        </Modal>\n\n        <Modal\n          visible={visible}\n          title={\"Verifique suas informações antes de prosseguir!\"}\n          footer={null}\n          closable\n          width={\"80vw\"}\n        >\n          <div>\n            <ModalVerifyInfoEstudante />\n          </div>\n          <div id={\"divFooterCarteira\"}>\n            <Button id={\"buttonConfirmFinal\"} onClick={onConfirm} type={\"ghost\"}>Confirmar <CheckOutlined /></Button>\n            <Button id={\"buttonCorrigirFinal\"}\n              onClick={() => {\n                setLoading(false)\n                setVisible(false)\n              }}\n              type={\"ghost\"}>\n              <LeftOutlined /> Voltar pra corrigir\n            </Button>\n\n            <Button id={\"buttonCorrigirFinalSmall\"}\n              onClick={() => {\n                setLoading(false)\n                setVisible(false)\n              }}\n              type={\"ghost\"}>\n              <LeftOutlined /> Voltar\n            </Button>\n\n          </div>\n        </Modal>\n        <p className={\"subTitleMainP\"}>Quase lá...</p>\n        <Row style={{ marginTop: \"16px\" }}>\n          <div id={\"divider\"} />\n\n          <Col xs={24} sm={24} md={4} lg={0} xl={0} />\n          <Col xs={24} sm={24} md={8} lg={8} xl={8}>\n            <Image src={Fotocarteira} style={{ borderRadius: \"15px\", height: \"auto\", width: \"100%\" }} alt=\"\" />\n          </Col>\n          <Col xs={0} sm={0} md={0} lg={1} xl={1} />\n          <Col xs={0} sm={0} md={0} lg={4} xl={4}>\n            <Image src={Fotocarteiraverso} style={{ borderRadius: \"15px\", height: \"auto\", width: \"100%\" }} alt=\"\" />\n          </Col>\n          <Col xs={0} sm={0} md={2} lg={1} xl={1} />\n          <Col xs={24} sm={24} md={10} lg={10} xl={10}>\n            <div id=\"info-envio-foto\">\n              <p className={\"titleUploadArea\"}>Carregar Carteira de Estudante</p>\n              <p className={\"subTitleMainPJustified\"}>Estamos quase lá! Para concluir seu pedido de atualização cadastral anexe sua carteira estudantil do ano vigente. De acordo com a Lei Municipal, para gozo do beneficio da meia passagem, só serão aceitas as carteiras estudantis emitidas pelas entidades estudantis do município de Teresina.</p>\n              <Form\n                // eslint-disable-next-line react/jsx-props-no-spreading\n                form={form}\n                name=\"enviofotoestudante\"\n                initialValues={{ remember: true }}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n              >\n                <Form.Item\n                  // valuePropName=\"fileList\"\n                  getValueFromEvent={normFile}\n                  name=\"fotoestudante\"\n                  status=\"error\"\n                >\n                  <Upload\n                    fileList={fileList}\n                    multiple={false}\n                    accept=\"image/*, .pdf\"\n                    beforeUpload={() => false}\n                    name=\"fotoestudante\"\n                    listType=\"picture\"\n                    onChange={handleChange}\n                    onPreview={handlePreview}\n                  >\n                    {imageupload === true ? null : uploadButton}\n                  </Upload>\n                </Form.Item>\n              </Form>\n            </div>\n          </Col>\n        </Row>\n        <br />\n        <Row>\n          <Col xs={0} sm={0} md={0} lg={5} xl={5}>\n            <Button\n              id={\"buttonPrev\"}\n              type={\"primary\"}\n              icon={<VerticalRightOutlined />}\n              loading={loadingback}\n              onClick={() => {\n                setLoadingback(true)\n                form.submit()\n              }}\n            >\n              Salvar e voltar\n          </Button>\n          </Col>\n          <Col xs={6} sm={6} md={6} lg={0} xl={0}>\n            <Button\n              id={\"buttonPrev\"}\n              type={\"primary\"}\n              icon={<VerticalRightOutlined />}\n              loading={loadingback}\n              onClick={() => {\n                setLoadingback(true)\n                form.submit()\n              }}\n            />\n          </Col>\n          <Col xs={1} sm={1} md={1} lg={14} xl={14} />\n          <Col xs={17} sm={17} md={17} lg={5} xl={5}>\n            <Button\n              id={\"buttonNext\"}\n              icon={<CheckOutlined />}\n              type=\"primary\"\n              loading={loading}\n              onClick={() => {\n                setLoading(true)\n                form.submit()\n              }}\n            >\n              Salvar e continuar\n            </Button>\n          </Col>\n        </Row>\n      </Skeleton>\n    </div>\n  );\n}\n\n\n\n/**\n *\n *\n\n *\n * <Form\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            name=\"enviofotoestudante\"\n            initialValues={{ remember: true }}\n            onFinish={onFinish}\n            onFinishFailed={onFinishFailed}\n          >\n            <Form.Item\n              valuePropName=\"fileList\"\n              getValueFromEvent={normFile}\n              name=\"fotoestudante\"\n              status=\"error\"\n            >\n              <Upload\n                multiple={false}\n                accept=\"image/*\"\n                beforeUpload={() => false}\n                name=\"fotoestudante\"\n                listType=\"picture\"\n              >\n                <Button\n                  disabled={imageupload === true}\n                  type=\"primary\"\n                  block\n                  className=\"form-button\"\n                >\n                  Carregar Carteira de Estudante\n                </Button>\n              </Upload>\n            </Form.Item>\n            <Button\n              type=\"primary\"\n              block\n              htmlType=\"submit\"\n              className=\"form-button\"\n            >\n              Enviar Carteira Atuaaaal\n            </Button>\n          </Form>\n *\n *\n *\n * <Row>\n          <Col className={\"divButtonPrev\"} xs={12} sm={12} md={12} lg={5} xl={5}>\n            <Button\n              id={\"buttonPrev\"}\n              icon={<VerticalRightOutlined />}\n              onClick={props.goToPrev}\n            >\n              Etapa Anterior\n          </Button>\n          </Col>\n          <Col xs={0} sm={0} md={0} lg={14} xl={14} />\n          <Col className={\"divButtonNext\"} xs={12} sm={12} md={12} lg={5} xl={5}>\n\n          </Col>\n        </Row>\n *\n *\n *\n */","C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\atualizacao\\pages\\forms_cadastro\\ComprovanteMatricula.tsx",["214","215"],"C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\atualizacao\\pages\\forms_cadastro\\DocumentoIdentificacao.tsx",["216"],"C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\pages\\menu\\Menu.tsx",[],"C:\\Users\\extra\\Desktop\\front-central-aluno-main\\src\\pages\\loading\\LoadingPrimeira.tsx",[],{"ruleId":"217","replacedBy":"218"},{"ruleId":"219","replacedBy":"220"},{"ruleId":"217","replacedBy":"218"},{"ruleId":"219","replacedBy":"220"},{"ruleId":"221","severity":1,"message":"222","line":371,"column":27,"nodeType":"223","endLine":371,"endColumn":97},{"ruleId":"224","severity":1,"message":"225","line":11,"column":196,"nodeType":"226","messageId":"227","endLine":11,"endColumn":209},{"ruleId":"228","severity":1,"message":"229","line":185,"column":6,"nodeType":"230","endLine":185,"endColumn":8,"suggestions":"231"},{"ruleId":"232","severity":1,"message":"233","line":319,"column":11,"nodeType":"223","endLine":319,"endColumn":34},{"ruleId":"232","severity":1,"message":"233","line":958,"column":27,"nodeType":"223","endLine":958,"endColumn":50},{"ruleId":"228","severity":1,"message":"234","line":45,"column":6,"nodeType":"230","endLine":45,"endColumn":8,"suggestions":"235"},{"ruleId":"221","severity":1,"message":"222","line":187,"column":15,"nodeType":"223","endLine":187,"endColumn":59},{"ruleId":"236","severity":1,"message":"237","line":126,"column":27,"nodeType":"238","messageId":"239","endLine":126,"endColumn":28,"suggestions":"240"},{"ruleId":"236","severity":1,"message":"241","line":126,"column":35,"nodeType":"238","messageId":"239","endLine":126,"endColumn":36,"suggestions":"242"},{"ruleId":"236","severity":1,"message":"237","line":126,"column":51,"nodeType":"238","messageId":"239","endLine":126,"endColumn":52,"suggestions":"243"},{"ruleId":"236","severity":1,"message":"241","line":126,"column":59,"nodeType":"238","messageId":"239","endLine":126,"endColumn":60,"suggestions":"244"},{"ruleId":"236","severity":1,"message":"241","line":126,"column":68,"nodeType":"238","messageId":"239","endLine":126,"endColumn":69,"suggestions":"245"},{"ruleId":"236","severity":1,"message":"241","line":126,"column":72,"nodeType":"238","messageId":"239","endLine":126,"endColumn":73,"suggestions":"246"},{"ruleId":"236","severity":1,"message":"237","line":126,"column":88,"nodeType":"238","messageId":"239","endLine":126,"endColumn":89,"suggestions":"247"},{"ruleId":"236","severity":1,"message":"241","line":126,"column":96,"nodeType":"238","messageId":"239","endLine":126,"endColumn":97,"suggestions":"248"},{"ruleId":"236","severity":1,"message":"237","line":126,"column":113,"nodeType":"238","messageId":"239","endLine":126,"endColumn":114,"suggestions":"249"},{"ruleId":"236","severity":1,"message":"241","line":126,"column":121,"nodeType":"238","messageId":"239","endLine":126,"endColumn":122,"suggestions":"250"},{"ruleId":"221","severity":1,"message":"222","line":78,"column":11,"nodeType":"223","endLine":78,"endColumn":35},{"ruleId":"221","severity":1,"message":"222","line":18,"column":15,"nodeType":"223","endLine":18,"endColumn":69},{"ruleId":"228","severity":1,"message":"251","line":21,"column":8,"nodeType":"230","endLine":21,"endColumn":10,"suggestions":"252"},{"ruleId":"228","severity":1,"message":"253","line":71,"column":8,"nodeType":"230","endLine":71,"endColumn":10,"suggestions":"254"},{"ruleId":"221","severity":1,"message":"222","line":214,"column":29,"nodeType":"223","endLine":214,"endColumn":32},{"ruleId":"221","severity":1,"message":"222","line":215,"column":29,"nodeType":"223","endLine":215,"endColumn":32},{"ruleId":"224","severity":1,"message":"255","line":232,"column":25,"nodeType":"226","messageId":"227","endLine":232,"endColumn":32},{"ruleId":"228","severity":1,"message":"256","line":176,"column":6,"nodeType":"230","endLine":176,"endColumn":8,"suggestions":"257"},{"ruleId":"228","severity":1,"message":"256","line":176,"column":6,"nodeType":"230","endLine":176,"endColumn":8,"suggestions":"258"},{"ruleId":"228","severity":1,"message":"259","line":134,"column":6,"nodeType":"230","endLine":134,"endColumn":8,"suggestions":"260"},{"ruleId":"228","severity":1,"message":"261","line":66,"column":6,"nodeType":"230","endLine":66,"endColumn":8,"suggestions":"262"},{"ruleId":"224","severity":1,"message":"263","line":23,"column":10,"nodeType":"226","messageId":"227","endLine":23,"endColumn":18},{"ruleId":"228","severity":1,"message":"251","line":67,"column":6,"nodeType":"230","endLine":67,"endColumn":8,"suggestions":"264"},{"ruleId":"224","severity":1,"message":"263","line":20,"column":10,"nodeType":"226","messageId":"227","endLine":20,"endColumn":18},{"ruleId":"228","severity":1,"message":"251","line":93,"column":6,"nodeType":"230","endLine":93,"endColumn":8,"suggestions":"265"},{"ruleId":"228","severity":1,"message":"266","line":117,"column":6,"nodeType":"230","endLine":117,"endColumn":8,"suggestions":"267"},{"ruleId":"224","severity":1,"message":"263","line":35,"column":10,"nodeType":"226","messageId":"227","endLine":35,"endColumn":18},{"ruleId":"228","severity":1,"message":"266","line":178,"column":6,"nodeType":"230","endLine":178,"endColumn":8,"suggestions":"268"},{"ruleId":"228","severity":1,"message":"269","line":150,"column":6,"nodeType":"230","endLine":150,"endColumn":8,"suggestions":"270"},{"ruleId":"224","severity":1,"message":"263","line":23,"column":10,"nodeType":"226","messageId":"227","endLine":23,"endColumn":18},{"ruleId":"228","severity":1,"message":"251","line":67,"column":6,"nodeType":"230","endLine":67,"endColumn":8,"suggestions":"271"},{"ruleId":"228","severity":1,"message":"261","line":66,"column":6,"nodeType":"230","endLine":66,"endColumn":8,"suggestions":"272"},{"ruleId":"228","severity":1,"message":"266","line":117,"column":6,"nodeType":"230","endLine":117,"endColumn":8,"suggestions":"273"},{"ruleId":"224","severity":1,"message":"263","line":20,"column":10,"nodeType":"226","messageId":"227","endLine":20,"endColumn":18},{"ruleId":"228","severity":1,"message":"251","line":93,"column":6,"nodeType":"230","endLine":93,"endColumn":8,"suggestions":"274"},{"ruleId":"224","severity":1,"message":"263","line":35,"column":10,"nodeType":"226","messageId":"227","endLine":35,"endColumn":18},{"ruleId":"228","severity":1,"message":"266","line":178,"column":6,"nodeType":"230","endLine":178,"endColumn":8,"suggestions":"275"},{"ruleId":"228","severity":1,"message":"269","line":150,"column":6,"nodeType":"230","endLine":150,"endColumn":8,"suggestions":"276"},"no-native-reassign",["277"],"no-negated-in-lhs",["278"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","@typescript-eslint/no-unused-vars","'MessageFilled' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'estudante.id', 'history', and 'origin'. Either include them or remove the dependency array.","ArrayExpression",["279"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has a missing dependency: 'isLogado'. Either include it or remove the dependency array.",["280"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["281","282"],"Unnecessary escape character: \\\".",["283","284"],["285","286"],["287","288"],["289","290"],["291","292"],["293","294"],["295","296"],["297","298"],["299","300"],"React Hook useEffect has a missing dependency: 'idUser'. Either include it or remove the dependency array.",["301"],"React Hook useEffect has missing dependencies: 'estudante' and 'history'. Either include them or remove the dependency array.",["302"],"'retorno' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'estudanteModel.id', 'history', and 'setStep'. Either include them or remove the dependency array.",["303"],["304"],"React Hook useEffect has missing dependencies: 'history' and 'idUser'. Either include them or remove the dependency array.",["305"],"React Hook useEffect has missing dependencies: 'form', 'history', and 'idUser'. Either include them or remove the dependency array.",["306"],"'errorPic' is assigned a value but never used.",["307"],["308"],"React Hook useEffect has missing dependencies: 'form' and 'idUser'. Either include them or remove the dependency array.",["309"],["310"],"React Hook useEffect has missing dependencies: 'form', 'history', 'idUser', and 'imagedata'. Either include them or remove the dependency array. You can also do a functional update 'setimagedata(i => ...)' if you only need 'imagedata' in the 'setimagedata' call.",["311"],["312"],["313"],["314"],["315"],["316"],["317"],"no-global-assign","no-unsafe-negation",{"desc":"318","fix":"319"},{"desc":"320","fix":"321"},{"messageId":"322","fix":"323","desc":"324"},{"messageId":"325","fix":"326","desc":"327"},{"messageId":"322","fix":"328","desc":"324"},{"messageId":"325","fix":"329","desc":"327"},{"messageId":"322","fix":"330","desc":"324"},{"messageId":"325","fix":"331","desc":"327"},{"messageId":"322","fix":"332","desc":"324"},{"messageId":"325","fix":"333","desc":"327"},{"messageId":"322","fix":"334","desc":"324"},{"messageId":"325","fix":"335","desc":"327"},{"messageId":"322","fix":"336","desc":"324"},{"messageId":"325","fix":"337","desc":"327"},{"messageId":"322","fix":"338","desc":"324"},{"messageId":"325","fix":"339","desc":"327"},{"messageId":"322","fix":"340","desc":"324"},{"messageId":"325","fix":"341","desc":"327"},{"messageId":"322","fix":"342","desc":"324"},{"messageId":"325","fix":"343","desc":"327"},{"messageId":"322","fix":"344","desc":"324"},{"messageId":"325","fix":"345","desc":"327"},{"desc":"346","fix":"347"},{"desc":"348","fix":"349"},{"desc":"350","fix":"351"},{"desc":"350","fix":"352"},{"desc":"353","fix":"354"},{"desc":"355","fix":"356"},{"desc":"346","fix":"357"},{"desc":"346","fix":"358"},{"desc":"359","fix":"360"},{"desc":"359","fix":"361"},{"desc":"362","fix":"363"},{"desc":"346","fix":"364"},{"desc":"355","fix":"365"},{"desc":"359","fix":"366"},{"desc":"346","fix":"367"},{"desc":"359","fix":"368"},{"desc":"362","fix":"369"},"Update the dependencies array to be: [estudante.id, history, origin]",{"range":"370","text":"371"},"Update the dependencies array to be: [isLogado]",{"range":"372","text":"373"},"removeEscape",{"range":"374","text":"375"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"376","text":"377"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"378","text":"375"},{"range":"379","text":"377"},{"range":"380","text":"375"},{"range":"381","text":"377"},{"range":"382","text":"375"},{"range":"383","text":"377"},{"range":"384","text":"375"},{"range":"385","text":"377"},{"range":"386","text":"375"},{"range":"387","text":"377"},{"range":"388","text":"375"},{"range":"389","text":"377"},{"range":"390","text":"375"},{"range":"391","text":"377"},{"range":"392","text":"375"},{"range":"393","text":"377"},{"range":"394","text":"375"},{"range":"395","text":"377"},"Update the dependencies array to be: [idUser]",{"range":"396","text":"397"},"Update the dependencies array to be: [estudante, history]",{"range":"398","text":"399"},"Update the dependencies array to be: [estudanteModel.id, history, setStep]",{"range":"400","text":"401"},{"range":"402","text":"401"},"Update the dependencies array to be: [history, idUser]",{"range":"403","text":"404"},"Update the dependencies array to be: [form, history, idUser]",{"range":"405","text":"406"},{"range":"407","text":"397"},{"range":"408","text":"397"},"Update the dependencies array to be: [form, idUser]",{"range":"409","text":"410"},{"range":"411","text":"410"},"Update the dependencies array to be: [form, history, idUser, imagedata]",{"range":"412","text":"413"},{"range":"414","text":"397"},{"range":"415","text":"406"},{"range":"416","text":"410"},{"range":"417","text":"397"},{"range":"418","text":"410"},{"range":"419","text":"413"},[6118,6120],"[estudante.id, history, origin]",[1426,1428],"[isLogado]",[2968,2969],"",[2968,2968],"\\",[2976,2977],[2976,2976],[2992,2993],[2992,2992],[3000,3001],[3000,3000],[3009,3010],[3009,3009],[3013,3014],[3013,3013],[3029,3030],[3029,3029],[3037,3038],[3037,3037],[3054,3055],[3054,3054],[3062,3063],[3062,3062],[653,655],"[idUser]",[2951,2953],"[estudante, history]",[6390,6392],"[estudanteModel.id, history, setStep]",[6486,6488],[5227,5229],"[history, idUser]",[2251,2253],"[form, history, idUser]",[2516,2518],[3836,3838],[4116,4118],"[form, idUser]",[5675,5677],[4897,4899],"[form, history, idUser, imagedata]",[2516,2518],[2251,2253],[4116,4118],[3827,3829],[5675,5677],[4897,4899]]